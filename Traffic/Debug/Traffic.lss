
Traffic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ee0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000f54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800060  00800060  00000f54  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001441  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000758  00000000  00000000  000024f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a80  00000000  00000000  00002c49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  000036cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c6  00000000  00000000  000038cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006c8  00000000  00000000  00003d92  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000445a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 37       	cpi	r26, 0x7A	; 122
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 76 02 	call	0x4ec	; 0x4ec <main>
  74:	0c 94 6e 07 	jmp	0xedc	; 0xedc <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <LED_toggle>:
{
	DIO_write(ledport, ledpin, LOW);
}
void LED_toggle(uint8_t ledport, uint8_t ledpin)
{
	DIO_toggle(ledport, ledpin);
  7c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <DIO_toggle>
  80:	08 95       	ret

00000082 <normal_mode>:
	}
}

void normal_mode(void)
{
	DIO_write(PORT_D,PIN3,LOW);
  82:	40 e0       	ldi	r20, 0x00	; 0
  84:	63 e0       	ldi	r22, 0x03	; 3
  86:	84 e4       	ldi	r24, 0x44	; 68
  88:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
	switch(next_state)
  8c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <next_state>
  90:	81 30       	cpi	r24, 0x01	; 1
  92:	51 f1       	breq	.+84     	; 0xe8 <normal_mode+0x66>
  94:	38 f0       	brcs	.+14     	; 0xa4 <normal_mode+0x22>
  96:	82 30       	cpi	r24, 0x02	; 2
  98:	09 f4       	brne	.+2      	; 0x9c <normal_mode+0x1a>
  9a:	61 c0       	rjmp	.+194    	; 0x15e <normal_mode+0xdc>
  9c:	83 30       	cpi	r24, 0x03	; 3
  9e:	09 f4       	brne	.+2      	; 0xa2 <normal_mode+0x20>
  a0:	81 c0       	rjmp	.+258    	; 0x1a4 <normal_mode+0x122>
  a2:	08 95       	ret
	{
		case Red_Light:
		DIO_write(PORT_A,Red_LED,HIGH);
  a4:	41 e0       	ldi	r20, 0x01	; 1
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	81 e4       	ldi	r24, 0x41	; 65
  aa:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		DIO_write(PORT_B,Green_LED,HIGH);
  ae:	41 e0       	ldi	r20, 0x01	; 1
  b0:	62 e0       	ldi	r22, 0x02	; 2
  b2:	82 e4       	ldi	r24, 0x42	; 66
  b4:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		next_state = Yellow_Light;
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <next_state>
		current_state = Red_Light;
  be:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <current_state>
		TIMER0_delay(5000,no_prescale);
  c2:	61 e0       	ldi	r22, 0x01	; 1
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	88 e8       	ldi	r24, 0x88	; 136
  c8:	93 e1       	ldi	r25, 0x13	; 19
  ca:	0e 94 fd 03 	call	0x7fa	; 0x7fa <TIMER0_delay>
		ISR_state = ISR_Not_Called;
  ce:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		DIO_write(PORT_A,Red_LED,LOW);
  d2:	40 e0       	ldi	r20, 0x00	; 0
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	81 e4       	ldi	r24, 0x41	; 65
  d8:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		DIO_write(PORT_B,Green_LED,LOW);
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	62 e0       	ldi	r22, 0x02	; 2
  e0:	82 e4       	ldi	r24, 0x42	; 66
  e2:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		break;
  e6:	08 95       	ret
			
		case Yellow_Light:
		DIO_write(PORT_A,Yellow_LED,HIGH);
  e8:	41 e0       	ldi	r20, 0x01	; 1
  ea:	61 e0       	ldi	r22, 0x01	; 1
  ec:	81 e4       	ldi	r24, 0x41	; 65
  ee:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		DIO_write(PORT_B,Yellow_LED,HIGH);
  f2:	41 e0       	ldi	r20, 0x01	; 1
  f4:	61 e0       	ldi	r22, 0x01	; 1
  f6:	82 e4       	ldi	r24, 0x42	; 66
  f8:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		next_state = Green_Light;
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <next_state>
		current_state = Yellow_Light;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <current_state>
		while(counter < 5 && ISR_state == ISR_Not_Called)
 108:	13 c0       	rjmp	.+38     	; 0x130 <normal_mode+0xae>
		{
			TIMER0_delay(1000,no_prescale);
 10a:	61 e0       	ldi	r22, 0x01	; 1
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	88 ee       	ldi	r24, 0xE8	; 232
 110:	93 e0       	ldi	r25, 0x03	; 3
 112:	0e 94 fd 03 	call	0x7fa	; 0x7fa <TIMER0_delay>
			LED_toggle(PORT_A,PIN1);
 116:	61 e0       	ldi	r22, 0x01	; 1
 118:	81 e4       	ldi	r24, 0x41	; 65
 11a:	0e 94 3e 00 	call	0x7c	; 0x7c <LED_toggle>
			LED_toggle(PORT_B,PIN1);
 11e:	61 e0       	ldi	r22, 0x01	; 1
 120:	82 e4       	ldi	r24, 0x42	; 66
 122:	0e 94 3e 00 	call	0x7c	; 0x7c <LED_toggle>
			counter++;
 126:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counter>
 12a:	8f 5f       	subi	r24, 0xFF	; 255
 12c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <counter>
		case Yellow_Light:
		DIO_write(PORT_A,Yellow_LED,HIGH);
		DIO_write(PORT_B,Yellow_LED,HIGH);
		next_state = Green_Light;
		current_state = Yellow_Light;
		while(counter < 5 && ISR_state == ISR_Not_Called)
 130:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counter>
 134:	85 30       	cpi	r24, 0x05	; 5
 136:	20 f4       	brcc	.+8      	; 0x140 <normal_mode+0xbe>
 138:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 13c:	88 23       	and	r24, r24
 13e:	29 f3       	breq	.-54     	; 0x10a <normal_mode+0x88>
			TIMER0_delay(1000,no_prescale);
			LED_toggle(PORT_A,PIN1);
			LED_toggle(PORT_B,PIN1);
			counter++;
		}
		counter = 0;
 140:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <counter>
		ISR_state = ISR_Not_Called;
 144:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		DIO_write(PORT_A,Yellow_LED,LOW);
 148:	40 e0       	ldi	r20, 0x00	; 0
 14a:	61 e0       	ldi	r22, 0x01	; 1
 14c:	81 e4       	ldi	r24, 0x41	; 65
 14e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		DIO_write(PORT_B,Yellow_LED,LOW);
 152:	40 e0       	ldi	r20, 0x00	; 0
 154:	61 e0       	ldi	r22, 0x01	; 1
 156:	82 e4       	ldi	r24, 0x42	; 66
 158:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		break;
 15c:	08 95       	ret

		case Green_Light:
		DIO_write(PORT_A,Green_LED,HIGH);
 15e:	41 e0       	ldi	r20, 0x01	; 1
 160:	62 e0       	ldi	r22, 0x02	; 2
 162:	81 e4       	ldi	r24, 0x41	; 65
 164:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		DIO_write(PORT_B,Red_LED,HIGH);
 168:	41 e0       	ldi	r20, 0x01	; 1
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	82 e4       	ldi	r24, 0x42	; 66
 16e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		next_state = Yellow_Light_2;
 172:	83 e0       	ldi	r24, 0x03	; 3
 174:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <next_state>
		current_state = Green_Light;
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <current_state>
		TIMER0_delay(5000,no_prescale);
 17e:	61 e0       	ldi	r22, 0x01	; 1
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	88 e8       	ldi	r24, 0x88	; 136
 184:	93 e1       	ldi	r25, 0x13	; 19
 186:	0e 94 fd 03 	call	0x7fa	; 0x7fa <TIMER0_delay>
		ISR_state = ISR_Not_Called;
 18a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		DIO_write(PORT_A,Green_LED,LOW);
 18e:	40 e0       	ldi	r20, 0x00	; 0
 190:	62 e0       	ldi	r22, 0x02	; 2
 192:	81 e4       	ldi	r24, 0x41	; 65
 194:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		DIO_write(PORT_B,Red_LED,LOW);
 198:	40 e0       	ldi	r20, 0x00	; 0
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	82 e4       	ldi	r24, 0x42	; 66
 19e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		break;
 1a2:	08 95       	ret

		case Yellow_Light_2:
		DIO_write(PORT_A,Yellow_LED,HIGH);
 1a4:	41 e0       	ldi	r20, 0x01	; 1
 1a6:	61 e0       	ldi	r22, 0x01	; 1
 1a8:	81 e4       	ldi	r24, 0x41	; 65
 1aa:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		DIO_write(PORT_B,Yellow_LED,HIGH);
 1ae:	41 e0       	ldi	r20, 0x01	; 1
 1b0:	61 e0       	ldi	r22, 0x01	; 1
 1b2:	82 e4       	ldi	r24, 0x42	; 66
 1b4:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		next_state = Red_Light;
 1b8:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <next_state>
		current_state = Yellow_Light_2;
 1bc:	83 e0       	ldi	r24, 0x03	; 3
 1be:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <current_state>
		while(counter < 5 && ISR_state == ISR_Not_Called)
 1c2:	13 c0       	rjmp	.+38     	; 0x1ea <normal_mode+0x168>
		{
			TIMER0_delay(1000,no_prescale);
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	88 ee       	ldi	r24, 0xE8	; 232
 1ca:	93 e0       	ldi	r25, 0x03	; 3
 1cc:	0e 94 fd 03 	call	0x7fa	; 0x7fa <TIMER0_delay>
			LED_toggle(PORT_A,PIN1);
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	81 e4       	ldi	r24, 0x41	; 65
 1d4:	0e 94 3e 00 	call	0x7c	; 0x7c <LED_toggle>
			LED_toggle(PORT_B,PIN1);
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	82 e4       	ldi	r24, 0x42	; 66
 1dc:	0e 94 3e 00 	call	0x7c	; 0x7c <LED_toggle>
			counter++;
 1e0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counter>
 1e4:	8f 5f       	subi	r24, 0xFF	; 255
 1e6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <counter>
		case Yellow_Light_2:
		DIO_write(PORT_A,Yellow_LED,HIGH);
		DIO_write(PORT_B,Yellow_LED,HIGH);
		next_state = Red_Light;
		current_state = Yellow_Light_2;
		while(counter < 5 && ISR_state == ISR_Not_Called)
 1ea:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counter>
 1ee:	85 30       	cpi	r24, 0x05	; 5
 1f0:	20 f4       	brcc	.+8      	; 0x1fa <normal_mode+0x178>
 1f2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1f6:	88 23       	and	r24, r24
 1f8:	29 f3       	breq	.-54     	; 0x1c4 <normal_mode+0x142>
			TIMER0_delay(1000,no_prescale);
			LED_toggle(PORT_A,PIN1);
			LED_toggle(PORT_B,PIN1);
			counter++;
		}
		counter = 0;
 1fa:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <counter>
		ISR_state = ISR_Not_Called;
 1fe:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		DIO_write(PORT_A,Yellow_LED,LOW);
 202:	40 e0       	ldi	r20, 0x00	; 0
 204:	61 e0       	ldi	r22, 0x01	; 1
 206:	81 e4       	ldi	r24, 0x41	; 65
 208:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		DIO_write(PORT_B,Yellow_LED,LOW);
 20c:	40 e0       	ldi	r20, 0x00	; 0
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	82 e4       	ldi	r24, 0x42	; 66
 212:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
 216:	08 95       	ret

00000218 <pedestrian_mode>:
}


void pedestrian_mode(void)
{
	PORTB = 0x00;
 218:	18 ba       	out	0x18, r1	; 24
	counter = 0;
 21a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <counter>
	Button_state = Button_pressed;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Button_state>
	//_delay_ms(500);
	//DIO_write(PORT_D,PIN3,LOW);
	TIMER_stop();
 224:	0e 94 de 03 	call	0x7bc	; 0x7bc <TIMER_stop>
	if(current_state == Red_Light)
 228:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <current_state>
 22c:	81 11       	cpse	r24, r1
 22e:	13 c0       	rjmp	.+38     	; 0x256 <pedestrian_mode+0x3e>
	{
		DIO_write(PORT_A,PIN0,HIGH); /*Cars RED led ON*/
 230:	41 e0       	ldi	r20, 0x01	; 1
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	81 e4       	ldi	r24, 0x41	; 65
 236:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		DIO_write(PORT_B,PIN2,HIGH); /*pedestrian GREEN led ON*/
 23a:	41 e0       	ldi	r20, 0x01	; 1
 23c:	62 e0       	ldi	r22, 0x02	; 2
 23e:	82 e4       	ldi	r24, 0x42	; 66
 240:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		TIMER0_delay(5000,no_prescale);
 244:	61 e0       	ldi	r22, 0x01	; 1
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	88 e8       	ldi	r24, 0x88	; 136
 24a:	93 e1       	ldi	r25, 0x13	; 19
 24c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <TIMER0_delay>
		Button_state = Button_Not_pressed;
 250:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Button_state>
 254:	aa c0       	rjmp	.+340    	; 0x3aa <pedestrian_mode+0x192>
	
	}
	else if(current_state == Green_Light || current_state == Yellow_Light || current_state == Yellow_Light_2)
 256:	81 50       	subi	r24, 0x01	; 1
 258:	83 30       	cpi	r24, 0x03	; 3
 25a:	08 f0       	brcs	.+2      	; 0x25e <pedestrian_mode+0x46>
 25c:	a6 c0       	rjmp	.+332    	; 0x3aa <pedestrian_mode+0x192>
	{
		DIO_write(PORT_B,PIN0,HIGH);	 /*pedestrian RED led ON*/
 25e:	41 e0       	ldi	r20, 0x01	; 1
 260:	60 e0       	ldi	r22, 0x00	; 0
 262:	82 e4       	ldi	r24, 0x42	; 66
 264:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		DIO_write(PORT_B,PIN1,HIGH);	/*pedestrian YELLOW led ON*/
 268:	41 e0       	ldi	r20, 0x01	; 1
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	82 e4       	ldi	r24, 0x42	; 66
 26e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		DIO_write(PORT_A,PIN1,HIGH);	/*Cars YELLOW led ON*/
 272:	41 e0       	ldi	r20, 0x01	; 1
 274:	61 e0       	ldi	r22, 0x01	; 1
 276:	81 e4       	ldi	r24, 0x41	; 65
 278:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		while(counter < 5)
 27c:	13 c0       	rjmp	.+38     	; 0x2a4 <pedestrian_mode+0x8c>
		{
			TIMER0_delay(1000,no_prescale);
 27e:	61 e0       	ldi	r22, 0x01	; 1
 280:	70 e0       	ldi	r23, 0x00	; 0
 282:	88 ee       	ldi	r24, 0xE8	; 232
 284:	93 e0       	ldi	r25, 0x03	; 3
 286:	0e 94 fd 03 	call	0x7fa	; 0x7fa <TIMER0_delay>
			LED_toggle(PORT_A,PIN1);
 28a:	61 e0       	ldi	r22, 0x01	; 1
 28c:	81 e4       	ldi	r24, 0x41	; 65
 28e:	0e 94 3e 00 	call	0x7c	; 0x7c <LED_toggle>
			LED_toggle(PORT_B,PIN1);
 292:	61 e0       	ldi	r22, 0x01	; 1
 294:	82 e4       	ldi	r24, 0x42	; 66
 296:	0e 94 3e 00 	call	0x7c	; 0x7c <LED_toggle>
			counter++;
 29a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counter>
 29e:	8f 5f       	subi	r24, 0xFF	; 255
 2a0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <counter>
	else if(current_state == Green_Light || current_state == Yellow_Light || current_state == Yellow_Light_2)
	{
		DIO_write(PORT_B,PIN0,HIGH);	 /*pedestrian RED led ON*/
		DIO_write(PORT_B,PIN1,HIGH);	/*pedestrian YELLOW led ON*/
		DIO_write(PORT_A,PIN1,HIGH);	/*Cars YELLOW led ON*/
		while(counter < 5)
 2a4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counter>
 2a8:	85 30       	cpi	r24, 0x05	; 5
 2aa:	48 f3       	brcs	.-46     	; 0x27e <pedestrian_mode+0x66>
			TIMER0_delay(1000,no_prescale);
			LED_toggle(PORT_A,PIN1);
			LED_toggle(PORT_B,PIN1);
			counter++;
		}
		counter = 0;		
 2ac:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <counter>
		DIO_write(PORT_B,PIN0,LOW);      /*pedestrian RED led OFF*/
 2b0:	40 e0       	ldi	r20, 0x00	; 0
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	82 e4       	ldi	r24, 0x42	; 66
 2b6:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		DIO_write(PORT_B,PIN1,LOW);      /*pedestrian YELLOW led OFF*/
 2ba:	40 e0       	ldi	r20, 0x00	; 0
 2bc:	61 e0       	ldi	r22, 0x01	; 1
 2be:	82 e4       	ldi	r24, 0x42	; 66
 2c0:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		DIO_write(PORT_A,PIN2,LOW);		 /*Cars GREEN led OFF*/
 2c4:	40 e0       	ldi	r20, 0x00	; 0
 2c6:	62 e0       	ldi	r22, 0x02	; 2
 2c8:	81 e4       	ldi	r24, 0x41	; 65
 2ca:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		DIO_write(PORT_A,PIN1,LOW);		 /*Cars YELLOW led OFF*/
 2ce:	40 e0       	ldi	r20, 0x00	; 0
 2d0:	61 e0       	ldi	r22, 0x01	; 1
 2d2:	81 e4       	ldi	r24, 0x41	; 65
 2d4:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		
		
		DIO_write(PORT_A,PIN0,HIGH);	/*Cars RED led ON*/
 2d8:	41 e0       	ldi	r20, 0x01	; 1
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	81 e4       	ldi	r24, 0x41	; 65
 2de:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		DIO_write(PORT_B,PIN2,HIGH);	/*pedestrian GREEN led ON*/
 2e2:	41 e0       	ldi	r20, 0x01	; 1
 2e4:	62 e0       	ldi	r22, 0x02	; 2
 2e6:	82 e4       	ldi	r24, 0x42	; 66
 2e8:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		TIMER0_delay(5000,no_prescale);
 2ec:	61 e0       	ldi	r22, 0x01	; 1
 2ee:	70 e0       	ldi	r23, 0x00	; 0
 2f0:	88 e8       	ldi	r24, 0x88	; 136
 2f2:	93 e1       	ldi	r25, 0x13	; 19
 2f4:	0e 94 fd 03 	call	0x7fa	; 0x7fa <TIMER0_delay>
		
		DIO_write(PORT_A,PIN0,LOW);		/*Cars RED led OFF*/
 2f8:	40 e0       	ldi	r20, 0x00	; 0
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	81 e4       	ldi	r24, 0x41	; 65
 2fe:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		DIO_write(PORT_A,PIN1,HIGH);	/*Cars YELLOW led ON*/
 302:	41 e0       	ldi	r20, 0x01	; 1
 304:	61 e0       	ldi	r22, 0x01	; 1
 306:	81 e4       	ldi	r24, 0x41	; 65
 308:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		DIO_write(PORT_B,PIN1,HIGH);   /*pedestrian YELLOW led ON*/
 30c:	41 e0       	ldi	r20, 0x01	; 1
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	82 e4       	ldi	r24, 0x42	; 66
 312:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		while(counter < 5)
 316:	13 c0       	rjmp	.+38     	; 0x33e <pedestrian_mode+0x126>
		{
			TIMER0_delay(1000,no_prescale);
 318:	61 e0       	ldi	r22, 0x01	; 1
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	88 ee       	ldi	r24, 0xE8	; 232
 31e:	93 e0       	ldi	r25, 0x03	; 3
 320:	0e 94 fd 03 	call	0x7fa	; 0x7fa <TIMER0_delay>
			LED_toggle(PORT_A,PIN1);
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	81 e4       	ldi	r24, 0x41	; 65
 328:	0e 94 3e 00 	call	0x7c	; 0x7c <LED_toggle>
			LED_toggle(PORT_B,PIN1);
 32c:	61 e0       	ldi	r22, 0x01	; 1
 32e:	82 e4       	ldi	r24, 0x42	; 66
 330:	0e 94 3e 00 	call	0x7c	; 0x7c <LED_toggle>
			counter++;
 334:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counter>
 338:	8f 5f       	subi	r24, 0xFF	; 255
 33a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <counter>
		TIMER0_delay(5000,no_prescale);
		
		DIO_write(PORT_A,PIN0,LOW);		/*Cars RED led OFF*/
		DIO_write(PORT_A,PIN1,HIGH);	/*Cars YELLOW led ON*/
		DIO_write(PORT_B,PIN1,HIGH);   /*pedestrian YELLOW led ON*/
		while(counter < 5)
 33e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counter>
 342:	85 30       	cpi	r24, 0x05	; 5
 344:	48 f3       	brcs	.-46     	; 0x318 <pedestrian_mode+0x100>
			TIMER0_delay(1000,no_prescale);
			LED_toggle(PORT_A,PIN1);
			LED_toggle(PORT_B,PIN1);
			counter++;
		}
		counter = 0;
 346:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <counter>
		DIO_write(PORT_B,PIN2,LOW);		/*pedestrian GREEN led OFF*/
 34a:	40 e0       	ldi	r20, 0x00	; 0
 34c:	62 e0       	ldi	r22, 0x02	; 2
 34e:	82 e4       	ldi	r24, 0x42	; 66
 350:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		DIO_write(PORT_B,PIN1,LOW);     /*pedestrian YELLOW led OFF*/
 354:	40 e0       	ldi	r20, 0x00	; 0
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	82 e4       	ldi	r24, 0x42	; 66
 35a:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		DIO_write(PORT_B,PIN0,HIGH);	/*pedestrian RED led ON*/	
 35e:	41 e0       	ldi	r20, 0x01	; 1
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	82 e4       	ldi	r24, 0x42	; 66
 364:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		DIO_write(PORT_A,PIN2,HIGH);	/*Cars GREEN led ON*/
 368:	41 e0       	ldi	r20, 0x01	; 1
 36a:	62 e0       	ldi	r22, 0x02	; 2
 36c:	81 e4       	ldi	r24, 0x41	; 65
 36e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		DIO_write(PORT_A,PIN1,LOW);		/*Cars YELLOW led OFF*/
 372:	40 e0       	ldi	r20, 0x00	; 0
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	81 e4       	ldi	r24, 0x41	; 65
 378:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		
		if(current_state == Green_Light)
 37c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <current_state>
 380:	82 30       	cpi	r24, 0x02	; 2
 382:	51 f4       	brne	.+20     	; 0x398 <pedestrian_mode+0x180>
		{
			TIMER0_delay(5000,no_prescale);
 384:	61 e0       	ldi	r22, 0x01	; 1
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	88 e8       	ldi	r24, 0x88	; 136
 38a:	93 e1       	ldi	r25, 0x13	; 19
 38c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <TIMER0_delay>
			next_state = Yellow_Light_2;
 390:	83 e0       	ldi	r24, 0x03	; 3
 392:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <next_state>
 396:	07 c0       	rjmp	.+14     	; 0x3a6 <pedestrian_mode+0x18e>
		}
		else if( current_state == Yellow_Light || current_state == Yellow_Light_2)
 398:	81 30       	cpi	r24, 0x01	; 1
 39a:	11 f0       	breq	.+4      	; 0x3a0 <pedestrian_mode+0x188>
 39c:	83 30       	cpi	r24, 0x03	; 3
 39e:	19 f4       	brne	.+6      	; 0x3a6 <pedestrian_mode+0x18e>
		{
			next_state = Green_Light;
 3a0:	82 e0       	ldi	r24, 0x02	; 2
 3a2:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <next_state>
		}
		else
		{
			
		}
		Button_state = Button_Not_pressed;		
 3a6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Button_state>
	}	
	TIMER_start(no_prescale);
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 a2 03 	call	0x744	; 0x744 <TIMER_start>
 3b2:	08 95       	ret

000003b4 <__vector_1>:
    {
		normal_mode();
    }
}
ISR(EXT_INT_0)
{
 3b4:	1f 92       	push	r1
 3b6:	0f 92       	push	r0
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	0f 92       	push	r0
 3bc:	11 24       	eor	r1, r1
 3be:	2f 93       	push	r18
 3c0:	3f 93       	push	r19
 3c2:	4f 93       	push	r20
 3c4:	5f 93       	push	r21
 3c6:	6f 93       	push	r22
 3c8:	7f 93       	push	r23
 3ca:	8f 93       	push	r24
 3cc:	9f 93       	push	r25
 3ce:	af 93       	push	r26
 3d0:	bf 93       	push	r27
 3d2:	ef 93       	push	r30
 3d4:	ff 93       	push	r31
	DIO_write(PORT_D,PIN4,HIGH);
 3d6:	41 e0       	ldi	r20, 0x01	; 1
 3d8:	64 e0       	ldi	r22, 0x04	; 4
 3da:	84 e4       	ldi	r24, 0x44	; 68
 3dc:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
	if(Button_state == Button_Not_pressed)
 3e0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Button_state>
 3e4:	81 11       	cpse	r24, r1
 3e6:	0f c0       	rjmp	.+30     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
	{
		ISR_state = ISR_Called;
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		DIO_write(PORT_D,PIN3,HIGH);
 3ee:	41 e0       	ldi	r20, 0x01	; 1
 3f0:	63 e0       	ldi	r22, 0x03	; 3
 3f2:	84 e4       	ldi	r24, 0x44	; 68
 3f4:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
		pedestrian_mode();
 3f8:	0e 94 0c 01 	call	0x218	; 0x218 <pedestrian_mode>
		DIO_write(PORT_D,PIN4,LOW);
 3fc:	40 e0       	ldi	r20, 0x00	; 0
 3fe:	64 e0       	ldi	r22, 0x04	; 4
 400:	84 e4       	ldi	r24, 0x44	; 68
 402:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
	}
}
 406:	ff 91       	pop	r31
 408:	ef 91       	pop	r30
 40a:	bf 91       	pop	r27
 40c:	af 91       	pop	r26
 40e:	9f 91       	pop	r25
 410:	8f 91       	pop	r24
 412:	7f 91       	pop	r23
 414:	6f 91       	pop	r22
 416:	5f 91       	pop	r21
 418:	4f 91       	pop	r20
 41a:	3f 91       	pop	r19
 41c:	2f 91       	pop	r18
 41e:	0f 90       	pop	r0
 420:	0f be       	out	0x3f, r0	; 63
 422:	0f 90       	pop	r0
 424:	1f 90       	pop	r1
 426:	18 95       	reti

00000428 <traffic_init>:
}

void traffic_init(void)
{
	/*Setting the LEDs of the cars and the pedestrian to be outputs*/
	DIO_init(PORT_A,PIN0,OUT);
 428:	41 e0       	ldi	r20, 0x01	; 1
 42a:	60 e0       	ldi	r22, 0x00	; 0
 42c:	81 e4       	ldi	r24, 0x41	; 65
 42e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <DIO_init>
	DIO_init(PORT_A,PIN1,OUT);
 432:	41 e0       	ldi	r20, 0x01	; 1
 434:	61 e0       	ldi	r22, 0x01	; 1
 436:	81 e4       	ldi	r24, 0x41	; 65
 438:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <DIO_init>
	DIO_init(PORT_A,PIN2,OUT);
 43c:	41 e0       	ldi	r20, 0x01	; 1
 43e:	62 e0       	ldi	r22, 0x02	; 2
 440:	81 e4       	ldi	r24, 0x41	; 65
 442:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <DIO_init>
	DIO_init(PORT_B,PIN0,OUT);
 446:	41 e0       	ldi	r20, 0x01	; 1
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	82 e4       	ldi	r24, 0x42	; 66
 44c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <DIO_init>
	DIO_init(PORT_B,PIN1,OUT);
 450:	41 e0       	ldi	r20, 0x01	; 1
 452:	61 e0       	ldi	r22, 0x01	; 1
 454:	82 e4       	ldi	r24, 0x42	; 66
 456:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <DIO_init>
	DIO_init(PORT_B,PIN2,OUT);
 45a:	41 e0       	ldi	r20, 0x01	; 1
 45c:	62 e0       	ldi	r22, 0x02	; 2
 45e:	82 e4       	ldi	r24, 0x42	; 66
 460:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <DIO_init>
	
	/*Setting the Interrupt PIN2 in PORTD to be input*/
	DIO_init(PORT_D,PIN2,IN);
 464:	40 e0       	ldi	r20, 0x00	; 0
 466:	62 e0       	ldi	r22, 0x02	; 2
 468:	84 e4       	ldi	r24, 0x44	; 68
 46a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <DIO_init>
		
	/*Initializing the outputs pins to be LOW*/
	DIO_write(PORT_A,PIN0,LOW);
 46e:	40 e0       	ldi	r20, 0x00	; 0
 470:	60 e0       	ldi	r22, 0x00	; 0
 472:	81 e4       	ldi	r24, 0x41	; 65
 474:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
	DIO_write(PORT_A,PIN1,LOW);
 478:	40 e0       	ldi	r20, 0x00	; 0
 47a:	61 e0       	ldi	r22, 0x01	; 1
 47c:	81 e4       	ldi	r24, 0x41	; 65
 47e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
	DIO_write(PORT_A,PIN2,LOW);
 482:	40 e0       	ldi	r20, 0x00	; 0
 484:	62 e0       	ldi	r22, 0x02	; 2
 486:	81 e4       	ldi	r24, 0x41	; 65
 488:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
	DIO_write(PORT_B,PIN0,LOW);
 48c:	40 e0       	ldi	r20, 0x00	; 0
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	82 e4       	ldi	r24, 0x42	; 66
 492:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
	DIO_write(PORT_B,PIN1,LOW);
 496:	40 e0       	ldi	r20, 0x00	; 0
 498:	61 e0       	ldi	r22, 0x01	; 1
 49a:	82 e4       	ldi	r24, 0x42	; 66
 49c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
	DIO_write(PORT_B,PIN2,LOW);
 4a0:	40 e0       	ldi	r20, 0x00	; 0
 4a2:	62 e0       	ldi	r22, 0x02	; 2
 4a4:	82 e4       	ldi	r24, 0x42	; 66
 4a6:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
	
	/*LEDs for debugging only*/
	DIO_init(PORT_D,PIN3,OUT);
 4aa:	41 e0       	ldi	r20, 0x01	; 1
 4ac:	63 e0       	ldi	r22, 0x03	; 3
 4ae:	84 e4       	ldi	r24, 0x44	; 68
 4b0:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <DIO_init>
	DIO_init(PORT_D,PIN4,OUT);	
 4b4:	41 e0       	ldi	r20, 0x01	; 1
 4b6:	64 e0       	ldi	r22, 0x04	; 4
 4b8:	84 e4       	ldi	r24, 0x44	; 68
 4ba:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <DIO_init>
	DIO_write(PORT_D,PIN3,LOW);
 4be:	40 e0       	ldi	r20, 0x00	; 0
 4c0:	63 e0       	ldi	r22, 0x03	; 3
 4c2:	84 e4       	ldi	r24, 0x44	; 68
 4c4:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
	DIO_write(PORT_D,PIN4,LOW);
 4c8:	40 e0       	ldi	r20, 0x00	; 0
 4ca:	64 e0       	ldi	r22, 0x04	; 4
 4cc:	84 e4       	ldi	r24, 0x44	; 68
 4ce:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_write>
	
	/*Enable the interrupts*/
	sei();
 4d2:	8f b7       	in	r24, 0x3f	; 63
 4d4:	80 68       	ori	r24, 0x80	; 128
 4d6:	8f bf       	out	0x3f, r24	; 63
	SET_BIT(MCUCR,PIN0);
 4d8:	85 b7       	in	r24, 0x35	; 53
 4da:	81 60       	ori	r24, 0x01	; 1
 4dc:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,PIN1);	
 4de:	85 b7       	in	r24, 0x35	; 53
 4e0:	82 60       	ori	r24, 0x02	; 2
 4e2:	85 bf       	out	0x35, r24	; 53
	SET_BIT(GICR,PIN6);	
 4e4:	8b b7       	in	r24, 0x3b	; 59
 4e6:	80 64       	ori	r24, 0x40	; 64
 4e8:	8b bf       	out	0x3b, r24	; 59
 4ea:	08 95       	ret

000004ec <main>:
void pedestrian_mode(void);
void traffic_init(void);

int main(void)
{
	traffic_init();	
 4ec:	0e 94 14 02 	call	0x428	; 0x428 <traffic_init>
    /* Replace with your application code */
    while (1) 
    {
		normal_mode();
 4f0:	0e 94 41 00 	call	0x82	; 0x82 <normal_mode>
 4f4:	fd cf       	rjmp	.-6      	; 0x4f0 <main+0x4>

000004f6 <DIO_init>:
	 		case PORT_C:
				*value = READ_BIT(PINC, pin_number);
	 		break;
	 		
	 		case PORT_D:
				*value = READ_BIT(PIND, pin_number);
 4f6:	82 34       	cpi	r24, 0x42	; 66
 4f8:	29 f1       	breq	.+74     	; 0x544 <DIO_init+0x4e>
 4fa:	18 f4       	brcc	.+6      	; 0x502 <DIO_init+0xc>
 4fc:	81 34       	cpi	r24, 0x41	; 65
 4fe:	39 f0       	breq	.+14     	; 0x50e <DIO_init+0x18>
 500:	08 95       	ret
 502:	83 34       	cpi	r24, 0x43	; 67
 504:	d1 f1       	breq	.+116    	; 0x57a <DIO_init+0x84>
 506:	84 34       	cpi	r24, 0x44	; 68
 508:	09 f4       	brne	.+2      	; 0x50c <DIO_init+0x16>
 50a:	52 c0       	rjmp	.+164    	; 0x5b0 <DIO_init+0xba>
 50c:	08 95       	ret
 50e:	41 30       	cpi	r20, 0x01	; 1
 510:	59 f4       	brne	.+22     	; 0x528 <DIO_init+0x32>
 512:	2a b3       	in	r18, 0x1a	; 26
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	02 c0       	rjmp	.+4      	; 0x51e <DIO_init+0x28>
 51a:	88 0f       	add	r24, r24
 51c:	99 1f       	adc	r25, r25
 51e:	6a 95       	dec	r22
 520:	e2 f7       	brpl	.-8      	; 0x51a <DIO_init+0x24>
 522:	82 2b       	or	r24, r18
 524:	8a bb       	out	0x1a, r24	; 26
 526:	08 95       	ret
 528:	41 11       	cpse	r20, r1
 52a:	5c c0       	rjmp	.+184    	; 0x5e4 <DIO_init+0xee>
 52c:	2a b3       	in	r18, 0x1a	; 26
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	02 c0       	rjmp	.+4      	; 0x538 <DIO_init+0x42>
 534:	88 0f       	add	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	6a 95       	dec	r22
 53a:	e2 f7       	brpl	.-8      	; 0x534 <DIO_init+0x3e>
 53c:	80 95       	com	r24
 53e:	82 23       	and	r24, r18
 540:	8a bb       	out	0x1a, r24	; 26
 542:	08 95       	ret
 544:	41 30       	cpi	r20, 0x01	; 1
 546:	59 f4       	brne	.+22     	; 0x55e <DIO_init+0x68>
 548:	27 b3       	in	r18, 0x17	; 23
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	02 c0       	rjmp	.+4      	; 0x554 <DIO_init+0x5e>
 550:	88 0f       	add	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	6a 95       	dec	r22
 556:	e2 f7       	brpl	.-8      	; 0x550 <DIO_init+0x5a>
 558:	82 2b       	or	r24, r18
 55a:	87 bb       	out	0x17, r24	; 23
 55c:	08 95       	ret
 55e:	41 11       	cpse	r20, r1
 560:	41 c0       	rjmp	.+130    	; 0x5e4 <DIO_init+0xee>
 562:	27 b3       	in	r18, 0x17	; 23
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	02 c0       	rjmp	.+4      	; 0x56e <DIO_init+0x78>
 56a:	88 0f       	add	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	6a 95       	dec	r22
 570:	e2 f7       	brpl	.-8      	; 0x56a <DIO_init+0x74>
 572:	80 95       	com	r24
 574:	82 23       	and	r24, r18
 576:	87 bb       	out	0x17, r24	; 23
 578:	08 95       	ret
 57a:	41 30       	cpi	r20, 0x01	; 1
 57c:	59 f4       	brne	.+22     	; 0x594 <DIO_init+0x9e>
 57e:	24 b3       	in	r18, 0x14	; 20
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	02 c0       	rjmp	.+4      	; 0x58a <DIO_init+0x94>
 586:	88 0f       	add	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	6a 95       	dec	r22
 58c:	e2 f7       	brpl	.-8      	; 0x586 <DIO_init+0x90>
 58e:	82 2b       	or	r24, r18
 590:	84 bb       	out	0x14, r24	; 20
 592:	08 95       	ret
 594:	41 11       	cpse	r20, r1
 596:	26 c0       	rjmp	.+76     	; 0x5e4 <DIO_init+0xee>
 598:	24 b3       	in	r18, 0x14	; 20
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <DIO_init+0xae>
 5a0:	88 0f       	add	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	6a 95       	dec	r22
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <DIO_init+0xaa>
 5a8:	80 95       	com	r24
 5aa:	82 23       	and	r24, r18
 5ac:	84 bb       	out	0x14, r24	; 20
 5ae:	08 95       	ret
 5b0:	41 30       	cpi	r20, 0x01	; 1
 5b2:	59 f4       	brne	.+22     	; 0x5ca <DIO_init+0xd4>
 5b4:	21 b3       	in	r18, 0x11	; 17
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <DIO_init+0xca>
 5bc:	88 0f       	add	r24, r24
 5be:	99 1f       	adc	r25, r25
 5c0:	6a 95       	dec	r22
 5c2:	e2 f7       	brpl	.-8      	; 0x5bc <DIO_init+0xc6>
 5c4:	82 2b       	or	r24, r18
 5c6:	81 bb       	out	0x11, r24	; 17
 5c8:	08 95       	ret
 5ca:	41 11       	cpse	r20, r1
 5cc:	0b c0       	rjmp	.+22     	; 0x5e4 <DIO_init+0xee>
 5ce:	21 b3       	in	r18, 0x11	; 17
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <DIO_init+0xe4>
 5d6:	88 0f       	add	r24, r24
 5d8:	99 1f       	adc	r25, r25
 5da:	6a 95       	dec	r22
 5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <DIO_init+0xe0>
 5de:	80 95       	com	r24
 5e0:	82 23       	and	r24, r18
 5e2:	81 bb       	out	0x11, r24	; 17
 5e4:	08 95       	ret

000005e6 <DIO_write>:
 5e6:	82 34       	cpi	r24, 0x42	; 66
 5e8:	29 f1       	breq	.+74     	; 0x634 <DIO_write+0x4e>
 5ea:	18 f4       	brcc	.+6      	; 0x5f2 <DIO_write+0xc>
 5ec:	81 34       	cpi	r24, 0x41	; 65
 5ee:	39 f0       	breq	.+14     	; 0x5fe <DIO_write+0x18>
 5f0:	08 95       	ret
 5f2:	83 34       	cpi	r24, 0x43	; 67
 5f4:	d1 f1       	breq	.+116    	; 0x66a <DIO_write+0x84>
 5f6:	84 34       	cpi	r24, 0x44	; 68
 5f8:	09 f4       	brne	.+2      	; 0x5fc <DIO_write+0x16>
 5fa:	52 c0       	rjmp	.+164    	; 0x6a0 <DIO_write+0xba>
 5fc:	08 95       	ret
 5fe:	41 30       	cpi	r20, 0x01	; 1
 600:	59 f4       	brne	.+22     	; 0x618 <DIO_write+0x32>
 602:	2b b3       	in	r18, 0x1b	; 27
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	02 c0       	rjmp	.+4      	; 0x60e <DIO_write+0x28>
 60a:	88 0f       	add	r24, r24
 60c:	99 1f       	adc	r25, r25
 60e:	6a 95       	dec	r22
 610:	e2 f7       	brpl	.-8      	; 0x60a <DIO_write+0x24>
 612:	82 2b       	or	r24, r18
 614:	8b bb       	out	0x1b, r24	; 27
 616:	08 95       	ret
 618:	41 11       	cpse	r20, r1
 61a:	5c c0       	rjmp	.+184    	; 0x6d4 <DIO_write+0xee>
 61c:	2b b3       	in	r18, 0x1b	; 27
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	02 c0       	rjmp	.+4      	; 0x628 <DIO_write+0x42>
 624:	88 0f       	add	r24, r24
 626:	99 1f       	adc	r25, r25
 628:	6a 95       	dec	r22
 62a:	e2 f7       	brpl	.-8      	; 0x624 <DIO_write+0x3e>
 62c:	80 95       	com	r24
 62e:	82 23       	and	r24, r18
 630:	8b bb       	out	0x1b, r24	; 27
 632:	08 95       	ret
 634:	41 30       	cpi	r20, 0x01	; 1
 636:	59 f4       	brne	.+22     	; 0x64e <DIO_write+0x68>
 638:	28 b3       	in	r18, 0x18	; 24
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	02 c0       	rjmp	.+4      	; 0x644 <DIO_write+0x5e>
 640:	88 0f       	add	r24, r24
 642:	99 1f       	adc	r25, r25
 644:	6a 95       	dec	r22
 646:	e2 f7       	brpl	.-8      	; 0x640 <DIO_write+0x5a>
 648:	82 2b       	or	r24, r18
 64a:	88 bb       	out	0x18, r24	; 24
 64c:	08 95       	ret
 64e:	41 11       	cpse	r20, r1
 650:	41 c0       	rjmp	.+130    	; 0x6d4 <DIO_write+0xee>
 652:	28 b3       	in	r18, 0x18	; 24
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	02 c0       	rjmp	.+4      	; 0x65e <DIO_write+0x78>
 65a:	88 0f       	add	r24, r24
 65c:	99 1f       	adc	r25, r25
 65e:	6a 95       	dec	r22
 660:	e2 f7       	brpl	.-8      	; 0x65a <DIO_write+0x74>
 662:	80 95       	com	r24
 664:	82 23       	and	r24, r18
 666:	88 bb       	out	0x18, r24	; 24
 668:	08 95       	ret
 66a:	41 30       	cpi	r20, 0x01	; 1
 66c:	59 f4       	brne	.+22     	; 0x684 <DIO_write+0x9e>
 66e:	25 b3       	in	r18, 0x15	; 21
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	02 c0       	rjmp	.+4      	; 0x67a <DIO_write+0x94>
 676:	88 0f       	add	r24, r24
 678:	99 1f       	adc	r25, r25
 67a:	6a 95       	dec	r22
 67c:	e2 f7       	brpl	.-8      	; 0x676 <DIO_write+0x90>
 67e:	82 2b       	or	r24, r18
 680:	85 bb       	out	0x15, r24	; 21
 682:	08 95       	ret
 684:	41 11       	cpse	r20, r1
 686:	26 c0       	rjmp	.+76     	; 0x6d4 <DIO_write+0xee>
 688:	25 b3       	in	r18, 0x15	; 21
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	02 c0       	rjmp	.+4      	; 0x694 <DIO_write+0xae>
 690:	88 0f       	add	r24, r24
 692:	99 1f       	adc	r25, r25
 694:	6a 95       	dec	r22
 696:	e2 f7       	brpl	.-8      	; 0x690 <DIO_write+0xaa>
 698:	80 95       	com	r24
 69a:	82 23       	and	r24, r18
 69c:	85 bb       	out	0x15, r24	; 21
 69e:	08 95       	ret
 6a0:	41 30       	cpi	r20, 0x01	; 1
 6a2:	59 f4       	brne	.+22     	; 0x6ba <DIO_write+0xd4>
 6a4:	22 b3       	in	r18, 0x12	; 18
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <DIO_write+0xca>
 6ac:	88 0f       	add	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	6a 95       	dec	r22
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <DIO_write+0xc6>
 6b4:	82 2b       	or	r24, r18
 6b6:	82 bb       	out	0x12, r24	; 18
 6b8:	08 95       	ret
 6ba:	41 11       	cpse	r20, r1
 6bc:	0b c0       	rjmp	.+22     	; 0x6d4 <DIO_write+0xee>
 6be:	22 b3       	in	r18, 0x12	; 18
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <DIO_write+0xe4>
 6c6:	88 0f       	add	r24, r24
 6c8:	99 1f       	adc	r25, r25
 6ca:	6a 95       	dec	r22
 6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <DIO_write+0xe0>
 6ce:	80 95       	com	r24
 6d0:	82 23       	and	r24, r18
 6d2:	82 bb       	out	0x12, r24	; 18
 6d4:	08 95       	ret

000006d6 <DIO_toggle>:
		
}

void DIO_toggle(uint8_t port_number, uint8_t pin_number)
{
 		switch(port_number)
 6d6:	82 34       	cpi	r24, 0x42	; 66
 6d8:	a1 f0       	breq	.+40     	; 0x702 <DIO_toggle+0x2c>
 6da:	18 f4       	brcc	.+6      	; 0x6e2 <DIO_toggle+0xc>
 6dc:	81 34       	cpi	r24, 0x41	; 65
 6de:	31 f0       	breq	.+12     	; 0x6ec <DIO_toggle+0x16>
 6e0:	08 95       	ret
 6e2:	83 34       	cpi	r24, 0x43	; 67
 6e4:	c9 f0       	breq	.+50     	; 0x718 <DIO_toggle+0x42>
 6e6:	84 34       	cpi	r24, 0x44	; 68
 6e8:	11 f1       	breq	.+68     	; 0x72e <DIO_toggle+0x58>
 6ea:	08 95       	ret
 		{
	 		case PORT_A:
	 		TOGGLE_BIT(PORTA, pin_number);
 6ec:	2b b3       	in	r18, 0x1b	; 27
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <DIO_toggle+0x22>
 6f4:	88 0f       	add	r24, r24
 6f6:	99 1f       	adc	r25, r25
 6f8:	6a 95       	dec	r22
 6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <DIO_toggle+0x1e>
 6fc:	82 27       	eor	r24, r18
 6fe:	8b bb       	out	0x1b, r24	; 27
	 		break;
 700:	08 95       	ret
	 		
	 		case PORT_B:
	 		TOGGLE_BIT(PORTB, pin_number);
 702:	28 b3       	in	r18, 0x18	; 24
 704:	81 e0       	ldi	r24, 0x01	; 1
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	02 c0       	rjmp	.+4      	; 0x70e <DIO_toggle+0x38>
 70a:	88 0f       	add	r24, r24
 70c:	99 1f       	adc	r25, r25
 70e:	6a 95       	dec	r22
 710:	e2 f7       	brpl	.-8      	; 0x70a <DIO_toggle+0x34>
 712:	82 27       	eor	r24, r18
 714:	88 bb       	out	0x18, r24	; 24
	 		break;
 716:	08 95       	ret
	 		
	 		case PORT_C:
	 		TOGGLE_BIT(PORTC, pin_number);
 718:	25 b3       	in	r18, 0x15	; 21
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	02 c0       	rjmp	.+4      	; 0x724 <DIO_toggle+0x4e>
 720:	88 0f       	add	r24, r24
 722:	99 1f       	adc	r25, r25
 724:	6a 95       	dec	r22
 726:	e2 f7       	brpl	.-8      	; 0x720 <DIO_toggle+0x4a>
 728:	82 27       	eor	r24, r18
 72a:	85 bb       	out	0x15, r24	; 21
	 		break;
 72c:	08 95       	ret
	 		
	 		case PORT_D:
	 		TOGGLE_BIT(PORTD, pin_number);
 72e:	22 b3       	in	r18, 0x12	; 18
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	02 c0       	rjmp	.+4      	; 0x73a <DIO_toggle+0x64>
 736:	88 0f       	add	r24, r24
 738:	99 1f       	adc	r25, r25
 73a:	6a 95       	dec	r22
 73c:	e2 f7       	brpl	.-8      	; 0x736 <DIO_toggle+0x60>
 73e:	82 27       	eor	r24, r18
 740:	82 bb       	out	0x12, r24	; 18
 742:	08 95       	ret

00000744 <TIMER_start>:
	}
	
}
void TIMER_start(uint16_t prescale)
{
	switch(prescale)
 744:	88 30       	cpi	r24, 0x08	; 8
 746:	91 05       	cpc	r25, r1
 748:	d1 f0       	breq	.+52     	; 0x77e <TIMER_start+0x3a>
 74a:	48 f4       	brcc	.+18     	; 0x75e <TIMER_start+0x1a>
 74c:	85 30       	cpi	r24, 0x05	; 5
 74e:	91 05       	cpc	r25, r1
 750:	31 f1       	breq	.+76     	; 0x79e <TIMER_start+0x5a>
 752:	86 30       	cpi	r24, 0x06	; 6
 754:	91 05       	cpc	r25, r1
 756:	39 f1       	breq	.+78     	; 0x7a6 <TIMER_start+0x62>
 758:	01 97       	sbiw	r24, 0x01	; 1
 75a:	41 f5       	brne	.+80     	; 0x7ac <TIMER_start+0x68>
 75c:	0c c0       	rjmp	.+24     	; 0x776 <TIMER_start+0x32>
 75e:	81 15       	cp	r24, r1
 760:	21 e0       	ldi	r18, 0x01	; 1
 762:	92 07       	cpc	r25, r18
 764:	a1 f0       	breq	.+40     	; 0x78e <TIMER_start+0x4a>
 766:	81 15       	cp	r24, r1
 768:	24 e0       	ldi	r18, 0x04	; 4
 76a:	92 07       	cpc	r25, r18
 76c:	a1 f0       	breq	.+40     	; 0x796 <TIMER_start+0x52>
 76e:	80 34       	cpi	r24, 0x40	; 64
 770:	91 05       	cpc	r25, r1
 772:	e1 f4       	brne	.+56     	; 0x7ac <TIMER_start+0x68>
 774:	08 c0       	rjmp	.+16     	; 0x786 <TIMER_start+0x42>
	{
		case no_prescale:				//No prescaling
			TCCR0 |= 0b00000001;
 776:	83 b7       	in	r24, 0x33	; 51
 778:	81 60       	ori	r24, 0x01	; 1
 77a:	83 bf       	out	0x33, r24	; 51
		break;
 77c:	08 95       	ret
		
		case prescale8:					//8 prescaling
			TCCR0 |= 0b00000010;
 77e:	83 b7       	in	r24, 0x33	; 51
 780:	82 60       	ori	r24, 0x02	; 2
 782:	83 bf       	out	0x33, r24	; 51
		break;
 784:	08 95       	ret

		case prescale64:				//64 prescaling
			TCCR0 |= 0b00000011;
 786:	83 b7       	in	r24, 0x33	; 51
 788:	83 60       	ori	r24, 0x03	; 3
 78a:	83 bf       	out	0x33, r24	; 51
		break;
 78c:	08 95       	ret
		
		case prescale256:				// 256 prescaling
			TCCR0 |= 0b00000100;
 78e:	83 b7       	in	r24, 0x33	; 51
 790:	84 60       	ori	r24, 0x04	; 4
 792:	83 bf       	out	0x33, r24	; 51
		break;
 794:	08 95       	ret
		
		case prescale1024:				//1024 prescaling
			TCCR0 |= 0b00000101;
 796:	83 b7       	in	r24, 0x33	; 51
 798:	85 60       	ori	r24, 0x05	; 5
 79a:	83 bf       	out	0x33, r24	; 51
		break;
 79c:	08 95       	ret
		
		case External_Falling: //External_Falling on T0 pin
			TCCR0 |= 0b00000110;
 79e:	83 b7       	in	r24, 0x33	; 51
 7a0:	86 60       	ori	r24, 0x06	; 6
 7a2:	83 bf       	out	0x33, r24	; 51
		break;
 7a4:	08 95       	ret


		case External_Raising : //External_Raising on T0 pin
			TCCR0 |= 0b00000111;
 7a6:	83 b7       	in	r24, 0x33	; 51
 7a8:	87 60       	ori	r24, 0x07	; 7
 7aa:	83 bf       	out	0x33, r24	; 51
 7ac:	08 95       	ret

000007ae <TIMER_overflow_read>:
	
}
void TIMER_overflow_read(void)
{
	//wait until the overflow flag is set
	while((READ_BIT(TIFR, PIN0) == 0));
 7ae:	08 b6       	in	r0, 0x38	; 56
 7b0:	00 fe       	sbrs	r0, 0
 7b2:	fd cf       	rjmp	.-6      	; 0x7ae <TIMER_overflow_read>
	
	//Clear the OverFlow flag
	SET_BIT(TIFR, PIN0);
 7b4:	88 b7       	in	r24, 0x38	; 56
 7b6:	81 60       	ori	r24, 0x01	; 1
 7b8:	88 bf       	out	0x38, r24	; 56
 7ba:	08 95       	ret

000007bc <TIMER_stop>:
}
void TIMER_stop(void)
{
	//Stop the timer
	TCCR0 = 0x00;
 7bc:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0x00;
 7be:	12 be       	out	0x32, r1	; 50
	overflows_counter = 0;
 7c0:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <overflows_counter+0x1>
 7c4:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <overflows_counter>
	Time_delay_ = 0;
 7c8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <Time_delay_>
 7cc:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <Time_delay_+0x1>
 7d0:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <Time_delay_+0x2>
 7d4:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Time_delay_+0x3>
	Timer_Tick = 0;
 7d8:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <Timer_Tick>
 7dc:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <Timer_Tick+0x1>
 7e0:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <Timer_Tick+0x2>
 7e4:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <Timer_Tick+0x3>
	Timer_Delay_max = 0;
 7e8:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <Timer_Delay_max>
 7ec:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <Timer_Delay_max+0x1>
 7f0:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <Timer_Delay_max+0x2>
 7f4:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <Timer_Delay_max+0x3>
 7f8:	08 95       	ret

000007fa <TIMER0_delay>:
}

void TIMER0_delay(uint16_t Time_delay, uint16_t prescale)
{
 7fa:	4f 92       	push	r4
 7fc:	5f 92       	push	r5
 7fe:	6f 92       	push	r6
 800:	7f 92       	push	r7
 802:	8f 92       	push	r8
 804:	9f 92       	push	r9
 806:	af 92       	push	r10
 808:	bf 92       	push	r11
 80a:	cf 92       	push	r12
 80c:	df 92       	push	r13
 80e:	ef 92       	push	r14
 810:	ff 92       	push	r15
 812:	cf 93       	push	r28
 814:	df 93       	push	r29
 816:	eb 01       	movw	r28, r22
	Time_delay_ = Time_delay*0.001;
 818:	bc 01       	movw	r22, r24
 81a:	80 e0       	ldi	r24, 0x00	; 0
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	0e 94 09 06 	call	0xc12	; 0xc12 <__floatunsisf>
 822:	2f e6       	ldi	r18, 0x6F	; 111
 824:	32 e1       	ldi	r19, 0x12	; 18
 826:	43 e8       	ldi	r20, 0x83	; 131
 828:	5a e3       	ldi	r21, 0x3A	; 58
 82a:	0e 94 01 07 	call	0xe02	; 0xe02 <__mulsf3>
 82e:	6b 01       	movw	r12, r22
 830:	7c 01       	movw	r14, r24
 832:	60 93 71 00 	sts	0x0071, r22	; 0x800071 <Time_delay_>
 836:	70 93 72 00 	sts	0x0072, r23	; 0x800072 <Time_delay_+0x1>
 83a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <Time_delay_+0x2>
 83e:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <Time_delay_+0x3>
	
	Timer_Tick = ( (prescale) / (pow(10.0,6.0)) );
 842:	be 01       	movw	r22, r28
 844:	80 e0       	ldi	r24, 0x00	; 0
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	0e 94 09 06 	call	0xc12	; 0xc12 <__floatunsisf>
 84c:	20 e0       	ldi	r18, 0x00	; 0
 84e:	34 e2       	ldi	r19, 0x24	; 36
 850:	44 e7       	ldi	r20, 0x74	; 116
 852:	59 e4       	ldi	r21, 0x49	; 73
 854:	0e 94 68 05 	call	0xad0	; 0xad0 <__divsf3>
 858:	2b 01       	movw	r4, r22
 85a:	3c 01       	movw	r6, r24
 85c:	60 93 76 00 	sts	0x0076, r22	; 0x800076 <Timer_Tick>
 860:	70 93 77 00 	sts	0x0077, r23	; 0x800077 <Timer_Tick+0x1>
 864:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <Timer_Tick+0x2>
 868:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <Timer_Tick+0x3>
	
	Timer_Delay_max = 	(Timer_Tick) * (256.0);
 86c:	20 e0       	ldi	r18, 0x00	; 0
 86e:	30 e0       	ldi	r19, 0x00	; 0
 870:	40 e8       	ldi	r20, 0x80	; 128
 872:	53 e4       	ldi	r21, 0x43	; 67
 874:	0e 94 01 07 	call	0xe02	; 0xe02 <__mulsf3>
 878:	4b 01       	movw	r8, r22
 87a:	5c 01       	movw	r10, r24
 87c:	60 93 6d 00 	sts	0x006D, r22	; 0x80006d <Timer_Delay_max>
 880:	70 93 6e 00 	sts	0x006E, r23	; 0x80006e <Timer_Delay_max+0x1>
 884:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <Timer_Delay_max+0x2>
 888:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <Timer_Delay_max+0x3>
	
	if(Time_delay_ < Timer_Delay_max)
 88c:	9b 01       	movw	r18, r22
 88e:	ac 01       	movw	r20, r24
 890:	c7 01       	movw	r24, r14
 892:	b6 01       	movw	r22, r12
 894:	0e 94 63 05 	call	0xac6	; 0xac6 <__cmpsf2>
 898:	88 23       	and	r24, r24
 89a:	ac f4       	brge	.+42     	; 0x8c6 <__stack+0x67>
	{
		Timer_initial_value = ( (Timer_Delay_max - Time_delay_ ) / (Timer_Tick) );
 89c:	a7 01       	movw	r20, r14
 89e:	96 01       	movw	r18, r12
 8a0:	c5 01       	movw	r24, r10
 8a2:	b4 01       	movw	r22, r8
 8a4:	0e 94 df 04 	call	0x9be	; 0x9be <__subsf3>
 8a8:	a3 01       	movw	r20, r6
 8aa:	92 01       	movw	r18, r4
 8ac:	0e 94 68 05 	call	0xad0	; 0xad0 <__divsf3>
 8b0:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__fixunssfsi>
 8b4:	60 93 75 00 	sts	0x0075, r22	; 0x800075 <Timer_initial_value>
			
		Number_of_overflows_needed = 1;
 8b8:	81 e0       	ldi	r24, 0x01	; 1
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <Number_of_overflows_needed+0x1>
 8c0:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <Number_of_overflows_needed>
 8c4:	4a c0       	rjmp	.+148    	; 0x95a <__stack+0xfb>
	}
	else if(Time_delay_ == Timer_Delay_max)
 8c6:	a5 01       	movw	r20, r10
 8c8:	94 01       	movw	r18, r8
 8ca:	c7 01       	movw	r24, r14
 8cc:	b6 01       	movw	r22, r12
 8ce:	0e 94 63 05 	call	0xac6	; 0xac6 <__cmpsf2>
 8d2:	81 11       	cpse	r24, r1
 8d4:	09 c0       	rjmp	.+18     	; 0x8e8 <__stack+0x89>
	{
		Timer_initial_value = 0x00;
 8d6:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <Timer_initial_value>
		Number_of_overflows_needed = 1;
 8da:	81 e0       	ldi	r24, 0x01	; 1
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <Number_of_overflows_needed+0x1>
 8e2:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <Number_of_overflows_needed>
 8e6:	39 c0       	rjmp	.+114    	; 0x95a <__stack+0xfb>
	}	
	
	else if(Time_delay_ > Timer_Delay_max)
 8e8:	a5 01       	movw	r20, r10
 8ea:	94 01       	movw	r18, r8
 8ec:	c7 01       	movw	r24, r14
 8ee:	b6 01       	movw	r22, r12
 8f0:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__gesf2>
 8f4:	18 16       	cp	r1, r24
 8f6:	8c f5       	brge	.+98     	; 0x95a <__stack+0xfb>
	{
		Number_of_overflows_needed = ceil((Time_delay_/Timer_Delay_max));
 8f8:	a5 01       	movw	r20, r10
 8fa:	94 01       	movw	r18, r8
 8fc:	c7 01       	movw	r24, r14
 8fe:	b6 01       	movw	r22, r12
 900:	0e 94 68 05 	call	0xad0	; 0xad0 <__divsf3>
 904:	0e 94 4c 05 	call	0xa98	; 0xa98 <ceil>
 908:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__fixunssfsi>
 90c:	4b 01       	movw	r8, r22
 90e:	5c 01       	movw	r10, r24
 910:	70 93 68 00 	sts	0x0068, r23	; 0x800068 <Number_of_overflows_needed+0x1>
 914:	60 93 67 00 	sts	0x0067, r22	; 0x800067 <Number_of_overflows_needed>
		Timer_initial_value = (ceil((256) - ((Time_delay_/Timer_Tick)/(Number_of_overflows_needed))));
 918:	a3 01       	movw	r20, r6
 91a:	92 01       	movw	r18, r4
 91c:	c7 01       	movw	r24, r14
 91e:	b6 01       	movw	r22, r12
 920:	0e 94 68 05 	call	0xad0	; 0xad0 <__divsf3>
 924:	6b 01       	movw	r12, r22
 926:	7c 01       	movw	r14, r24
 928:	b4 01       	movw	r22, r8
 92a:	80 e0       	ldi	r24, 0x00	; 0
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	0e 94 09 06 	call	0xc12	; 0xc12 <__floatunsisf>
 932:	9b 01       	movw	r18, r22
 934:	ac 01       	movw	r20, r24
 936:	c7 01       	movw	r24, r14
 938:	b6 01       	movw	r22, r12
 93a:	0e 94 68 05 	call	0xad0	; 0xad0 <__divsf3>
 93e:	9b 01       	movw	r18, r22
 940:	ac 01       	movw	r20, r24
 942:	60 e0       	ldi	r22, 0x00	; 0
 944:	70 e0       	ldi	r23, 0x00	; 0
 946:	80 e8       	ldi	r24, 0x80	; 128
 948:	93 e4       	ldi	r25, 0x43	; 67
 94a:	0e 94 df 04 	call	0x9be	; 0x9be <__subsf3>
 94e:	0e 94 4c 05 	call	0xa98	; 0xa98 <ceil>
 952:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__fixunssfsi>
 956:	60 93 75 00 	sts	0x0075, r22	; 0x800075 <Timer_initial_value>
	}
	
	TCNT0 = Timer_initial_value;		// setting initial value
 95a:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <Timer_initial_value>
 95e:	82 bf       	out	0x32, r24	; 50
	
	TIMER_start(prescale);
 960:	ce 01       	movw	r24, r28
 962:	0e 94 a2 03 	call	0x744	; 0x744 <TIMER_start>

	while(overflows_counter < Number_of_overflows_needed)
 966:	0b c0       	rjmp	.+22     	; 0x97e <__stack+0x11f>
	{
		TIMER_overflow_read();
 968:	0e 94 d7 03 	call	0x7ae	; 0x7ae <TIMER_overflow_read>
		overflows_counter++;
 96c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <overflows_counter>
 970:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <overflows_counter+0x1>
 974:	01 96       	adiw	r24, 0x01	; 1
 976:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <overflows_counter+0x1>
 97a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <overflows_counter>
	
	TCNT0 = Timer_initial_value;		// setting initial value
	
	TIMER_start(prescale);

	while(overflows_counter < Number_of_overflows_needed)
 97e:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <overflows_counter>
 982:	30 91 66 00 	lds	r19, 0x0066	; 0x800066 <overflows_counter+0x1>
 986:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Number_of_overflows_needed>
 98a:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Number_of_overflows_needed+0x1>
 98e:	28 17       	cp	r18, r24
 990:	39 07       	cpc	r19, r25
 992:	50 f3       	brcs	.-44     	; 0x968 <__stack+0x109>
	{
		TIMER_overflow_read();
		overflows_counter++;
	}
	overflows_counter = 0;
 994:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <overflows_counter+0x1>
 998:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <overflows_counter>
	
	TIMER_stop();
 99c:	0e 94 de 03 	call	0x7bc	; 0x7bc <TIMER_stop>
}
 9a0:	df 91       	pop	r29
 9a2:	cf 91       	pop	r28
 9a4:	ff 90       	pop	r15
 9a6:	ef 90       	pop	r14
 9a8:	df 90       	pop	r13
 9aa:	cf 90       	pop	r12
 9ac:	bf 90       	pop	r11
 9ae:	af 90       	pop	r10
 9b0:	9f 90       	pop	r9
 9b2:	8f 90       	pop	r8
 9b4:	7f 90       	pop	r7
 9b6:	6f 90       	pop	r6
 9b8:	5f 90       	pop	r5
 9ba:	4f 90       	pop	r4
 9bc:	08 95       	ret

000009be <__subsf3>:
 9be:	50 58       	subi	r21, 0x80	; 128

000009c0 <__addsf3>:
 9c0:	bb 27       	eor	r27, r27
 9c2:	aa 27       	eor	r26, r26
 9c4:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__addsf3x>
 9c8:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__fp_round>
 9cc:	0e 94 9c 06 	call	0xd38	; 0xd38 <__fp_pscA>
 9d0:	38 f0       	brcs	.+14     	; 0x9e0 <__addsf3+0x20>
 9d2:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fp_pscB>
 9d6:	20 f0       	brcs	.+8      	; 0x9e0 <__addsf3+0x20>
 9d8:	39 f4       	brne	.+14     	; 0x9e8 <__addsf3+0x28>
 9da:	9f 3f       	cpi	r25, 0xFF	; 255
 9dc:	19 f4       	brne	.+6      	; 0x9e4 <__addsf3+0x24>
 9de:	26 f4       	brtc	.+8      	; 0x9e8 <__addsf3+0x28>
 9e0:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__fp_nan>
 9e4:	0e f4       	brtc	.+2      	; 0x9e8 <__addsf3+0x28>
 9e6:	e0 95       	com	r30
 9e8:	e7 fb       	bst	r30, 7
 9ea:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__fp_inf>

000009ee <__addsf3x>:
 9ee:	e9 2f       	mov	r30, r25
 9f0:	0e 94 bb 06 	call	0xd76	; 0xd76 <__fp_split3>
 9f4:	58 f3       	brcs	.-42     	; 0x9cc <__addsf3+0xc>
 9f6:	ba 17       	cp	r27, r26
 9f8:	62 07       	cpc	r22, r18
 9fa:	73 07       	cpc	r23, r19
 9fc:	84 07       	cpc	r24, r20
 9fe:	95 07       	cpc	r25, r21
 a00:	20 f0       	brcs	.+8      	; 0xa0a <__addsf3x+0x1c>
 a02:	79 f4       	brne	.+30     	; 0xa22 <__addsf3x+0x34>
 a04:	a6 f5       	brtc	.+104    	; 0xa6e <__addsf3x+0x80>
 a06:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__fp_zero>
 a0a:	0e f4       	brtc	.+2      	; 0xa0e <__addsf3x+0x20>
 a0c:	e0 95       	com	r30
 a0e:	0b 2e       	mov	r0, r27
 a10:	ba 2f       	mov	r27, r26
 a12:	a0 2d       	mov	r26, r0
 a14:	0b 01       	movw	r0, r22
 a16:	b9 01       	movw	r22, r18
 a18:	90 01       	movw	r18, r0
 a1a:	0c 01       	movw	r0, r24
 a1c:	ca 01       	movw	r24, r20
 a1e:	a0 01       	movw	r20, r0
 a20:	11 24       	eor	r1, r1
 a22:	ff 27       	eor	r31, r31
 a24:	59 1b       	sub	r21, r25
 a26:	99 f0       	breq	.+38     	; 0xa4e <__addsf3x+0x60>
 a28:	59 3f       	cpi	r21, 0xF9	; 249
 a2a:	50 f4       	brcc	.+20     	; 0xa40 <__addsf3x+0x52>
 a2c:	50 3e       	cpi	r21, 0xE0	; 224
 a2e:	68 f1       	brcs	.+90     	; 0xa8a <__addsf3x+0x9c>
 a30:	1a 16       	cp	r1, r26
 a32:	f0 40       	sbci	r31, 0x00	; 0
 a34:	a2 2f       	mov	r26, r18
 a36:	23 2f       	mov	r18, r19
 a38:	34 2f       	mov	r19, r20
 a3a:	44 27       	eor	r20, r20
 a3c:	58 5f       	subi	r21, 0xF8	; 248
 a3e:	f3 cf       	rjmp	.-26     	; 0xa26 <__addsf3x+0x38>
 a40:	46 95       	lsr	r20
 a42:	37 95       	ror	r19
 a44:	27 95       	ror	r18
 a46:	a7 95       	ror	r26
 a48:	f0 40       	sbci	r31, 0x00	; 0
 a4a:	53 95       	inc	r21
 a4c:	c9 f7       	brne	.-14     	; 0xa40 <__addsf3x+0x52>
 a4e:	7e f4       	brtc	.+30     	; 0xa6e <__addsf3x+0x80>
 a50:	1f 16       	cp	r1, r31
 a52:	ba 0b       	sbc	r27, r26
 a54:	62 0b       	sbc	r22, r18
 a56:	73 0b       	sbc	r23, r19
 a58:	84 0b       	sbc	r24, r20
 a5a:	ba f0       	brmi	.+46     	; 0xa8a <__addsf3x+0x9c>
 a5c:	91 50       	subi	r25, 0x01	; 1
 a5e:	a1 f0       	breq	.+40     	; 0xa88 <__addsf3x+0x9a>
 a60:	ff 0f       	add	r31, r31
 a62:	bb 1f       	adc	r27, r27
 a64:	66 1f       	adc	r22, r22
 a66:	77 1f       	adc	r23, r23
 a68:	88 1f       	adc	r24, r24
 a6a:	c2 f7       	brpl	.-16     	; 0xa5c <__addsf3x+0x6e>
 a6c:	0e c0       	rjmp	.+28     	; 0xa8a <__addsf3x+0x9c>
 a6e:	ba 0f       	add	r27, r26
 a70:	62 1f       	adc	r22, r18
 a72:	73 1f       	adc	r23, r19
 a74:	84 1f       	adc	r24, r20
 a76:	48 f4       	brcc	.+18     	; 0xa8a <__addsf3x+0x9c>
 a78:	87 95       	ror	r24
 a7a:	77 95       	ror	r23
 a7c:	67 95       	ror	r22
 a7e:	b7 95       	ror	r27
 a80:	f7 95       	ror	r31
 a82:	9e 3f       	cpi	r25, 0xFE	; 254
 a84:	08 f0       	brcs	.+2      	; 0xa88 <__addsf3x+0x9a>
 a86:	b0 cf       	rjmp	.-160    	; 0x9e8 <__addsf3+0x28>
 a88:	93 95       	inc	r25
 a8a:	88 0f       	add	r24, r24
 a8c:	08 f0       	brcs	.+2      	; 0xa90 <__addsf3x+0xa2>
 a8e:	99 27       	eor	r25, r25
 a90:	ee 0f       	add	r30, r30
 a92:	97 95       	ror	r25
 a94:	87 95       	ror	r24
 a96:	08 95       	ret

00000a98 <ceil>:
 a98:	0e 94 dd 06 	call	0xdba	; 0xdba <__fp_trunc>
 a9c:	90 f0       	brcs	.+36     	; 0xac2 <ceil+0x2a>
 a9e:	9f 37       	cpi	r25, 0x7F	; 127
 aa0:	48 f4       	brcc	.+18     	; 0xab4 <ceil+0x1c>
 aa2:	91 11       	cpse	r25, r1
 aa4:	16 f4       	brtc	.+4      	; 0xaaa <ceil+0x12>
 aa6:	0c 94 f6 06 	jmp	0xdec	; 0xdec <__fp_szero>
 aaa:	60 e0       	ldi	r22, 0x00	; 0
 aac:	70 e0       	ldi	r23, 0x00	; 0
 aae:	80 e8       	ldi	r24, 0x80	; 128
 ab0:	9f e3       	ldi	r25, 0x3F	; 63
 ab2:	08 95       	ret
 ab4:	26 f0       	brts	.+8      	; 0xabe <ceil+0x26>
 ab6:	1b 16       	cp	r1, r27
 ab8:	61 1d       	adc	r22, r1
 aba:	71 1d       	adc	r23, r1
 abc:	81 1d       	adc	r24, r1
 abe:	0c 94 70 06 	jmp	0xce0	; 0xce0 <__fp_mintl>
 ac2:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <__fp_mpack>

00000ac6 <__cmpsf2>:
 ac6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__fp_cmp>
 aca:	08 f4       	brcc	.+2      	; 0xace <__cmpsf2+0x8>
 acc:	81 e0       	ldi	r24, 0x01	; 1
 ace:	08 95       	ret

00000ad0 <__divsf3>:
 ad0:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__divsf3x>
 ad4:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__fp_round>
 ad8:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fp_pscB>
 adc:	58 f0       	brcs	.+22     	; 0xaf4 <__divsf3+0x24>
 ade:	0e 94 9c 06 	call	0xd38	; 0xd38 <__fp_pscA>
 ae2:	40 f0       	brcs	.+16     	; 0xaf4 <__divsf3+0x24>
 ae4:	29 f4       	brne	.+10     	; 0xaf0 <__divsf3+0x20>
 ae6:	5f 3f       	cpi	r21, 0xFF	; 255
 ae8:	29 f0       	breq	.+10     	; 0xaf4 <__divsf3+0x24>
 aea:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__fp_inf>
 aee:	51 11       	cpse	r21, r1
 af0:	0c 94 f6 06 	jmp	0xdec	; 0xdec <__fp_szero>
 af4:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__fp_nan>

00000af8 <__divsf3x>:
 af8:	0e 94 bb 06 	call	0xd76	; 0xd76 <__fp_split3>
 afc:	68 f3       	brcs	.-38     	; 0xad8 <__divsf3+0x8>

00000afe <__divsf3_pse>:
 afe:	99 23       	and	r25, r25
 b00:	b1 f3       	breq	.-20     	; 0xaee <__divsf3+0x1e>
 b02:	55 23       	and	r21, r21
 b04:	91 f3       	breq	.-28     	; 0xaea <__divsf3+0x1a>
 b06:	95 1b       	sub	r25, r21
 b08:	55 0b       	sbc	r21, r21
 b0a:	bb 27       	eor	r27, r27
 b0c:	aa 27       	eor	r26, r26
 b0e:	62 17       	cp	r22, r18
 b10:	73 07       	cpc	r23, r19
 b12:	84 07       	cpc	r24, r20
 b14:	38 f0       	brcs	.+14     	; 0xb24 <__divsf3_pse+0x26>
 b16:	9f 5f       	subi	r25, 0xFF	; 255
 b18:	5f 4f       	sbci	r21, 0xFF	; 255
 b1a:	22 0f       	add	r18, r18
 b1c:	33 1f       	adc	r19, r19
 b1e:	44 1f       	adc	r20, r20
 b20:	aa 1f       	adc	r26, r26
 b22:	a9 f3       	breq	.-22     	; 0xb0e <__divsf3_pse+0x10>
 b24:	35 d0       	rcall	.+106    	; 0xb90 <__divsf3_pse+0x92>
 b26:	0e 2e       	mov	r0, r30
 b28:	3a f0       	brmi	.+14     	; 0xb38 <__divsf3_pse+0x3a>
 b2a:	e0 e8       	ldi	r30, 0x80	; 128
 b2c:	32 d0       	rcall	.+100    	; 0xb92 <__divsf3_pse+0x94>
 b2e:	91 50       	subi	r25, 0x01	; 1
 b30:	50 40       	sbci	r21, 0x00	; 0
 b32:	e6 95       	lsr	r30
 b34:	00 1c       	adc	r0, r0
 b36:	ca f7       	brpl	.-14     	; 0xb2a <__divsf3_pse+0x2c>
 b38:	2b d0       	rcall	.+86     	; 0xb90 <__divsf3_pse+0x92>
 b3a:	fe 2f       	mov	r31, r30
 b3c:	29 d0       	rcall	.+82     	; 0xb90 <__divsf3_pse+0x92>
 b3e:	66 0f       	add	r22, r22
 b40:	77 1f       	adc	r23, r23
 b42:	88 1f       	adc	r24, r24
 b44:	bb 1f       	adc	r27, r27
 b46:	26 17       	cp	r18, r22
 b48:	37 07       	cpc	r19, r23
 b4a:	48 07       	cpc	r20, r24
 b4c:	ab 07       	cpc	r26, r27
 b4e:	b0 e8       	ldi	r27, 0x80	; 128
 b50:	09 f0       	breq	.+2      	; 0xb54 <__divsf3_pse+0x56>
 b52:	bb 0b       	sbc	r27, r27
 b54:	80 2d       	mov	r24, r0
 b56:	bf 01       	movw	r22, r30
 b58:	ff 27       	eor	r31, r31
 b5a:	93 58       	subi	r25, 0x83	; 131
 b5c:	5f 4f       	sbci	r21, 0xFF	; 255
 b5e:	3a f0       	brmi	.+14     	; 0xb6e <__divsf3_pse+0x70>
 b60:	9e 3f       	cpi	r25, 0xFE	; 254
 b62:	51 05       	cpc	r21, r1
 b64:	78 f0       	brcs	.+30     	; 0xb84 <__divsf3_pse+0x86>
 b66:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__fp_inf>
 b6a:	0c 94 f6 06 	jmp	0xdec	; 0xdec <__fp_szero>
 b6e:	5f 3f       	cpi	r21, 0xFF	; 255
 b70:	e4 f3       	brlt	.-8      	; 0xb6a <__divsf3_pse+0x6c>
 b72:	98 3e       	cpi	r25, 0xE8	; 232
 b74:	d4 f3       	brlt	.-12     	; 0xb6a <__divsf3_pse+0x6c>
 b76:	86 95       	lsr	r24
 b78:	77 95       	ror	r23
 b7a:	67 95       	ror	r22
 b7c:	b7 95       	ror	r27
 b7e:	f7 95       	ror	r31
 b80:	9f 5f       	subi	r25, 0xFF	; 255
 b82:	c9 f7       	brne	.-14     	; 0xb76 <__divsf3_pse+0x78>
 b84:	88 0f       	add	r24, r24
 b86:	91 1d       	adc	r25, r1
 b88:	96 95       	lsr	r25
 b8a:	87 95       	ror	r24
 b8c:	97 f9       	bld	r25, 7
 b8e:	08 95       	ret
 b90:	e1 e0       	ldi	r30, 0x01	; 1
 b92:	66 0f       	add	r22, r22
 b94:	77 1f       	adc	r23, r23
 b96:	88 1f       	adc	r24, r24
 b98:	bb 1f       	adc	r27, r27
 b9a:	62 17       	cp	r22, r18
 b9c:	73 07       	cpc	r23, r19
 b9e:	84 07       	cpc	r24, r20
 ba0:	ba 07       	cpc	r27, r26
 ba2:	20 f0       	brcs	.+8      	; 0xbac <__divsf3_pse+0xae>
 ba4:	62 1b       	sub	r22, r18
 ba6:	73 0b       	sbc	r23, r19
 ba8:	84 0b       	sbc	r24, r20
 baa:	ba 0b       	sbc	r27, r26
 bac:	ee 1f       	adc	r30, r30
 bae:	88 f7       	brcc	.-30     	; 0xb92 <__divsf3_pse+0x94>
 bb0:	e0 95       	com	r30
 bb2:	08 95       	ret

00000bb4 <__fixunssfsi>:
 bb4:	0e 94 c3 06 	call	0xd86	; 0xd86 <__fp_splitA>
 bb8:	88 f0       	brcs	.+34     	; 0xbdc <__fixunssfsi+0x28>
 bba:	9f 57       	subi	r25, 0x7F	; 127
 bbc:	98 f0       	brcs	.+38     	; 0xbe4 <__fixunssfsi+0x30>
 bbe:	b9 2f       	mov	r27, r25
 bc0:	99 27       	eor	r25, r25
 bc2:	b7 51       	subi	r27, 0x17	; 23
 bc4:	b0 f0       	brcs	.+44     	; 0xbf2 <__fixunssfsi+0x3e>
 bc6:	e1 f0       	breq	.+56     	; 0xc00 <__fixunssfsi+0x4c>
 bc8:	66 0f       	add	r22, r22
 bca:	77 1f       	adc	r23, r23
 bcc:	88 1f       	adc	r24, r24
 bce:	99 1f       	adc	r25, r25
 bd0:	1a f0       	brmi	.+6      	; 0xbd8 <__fixunssfsi+0x24>
 bd2:	ba 95       	dec	r27
 bd4:	c9 f7       	brne	.-14     	; 0xbc8 <__fixunssfsi+0x14>
 bd6:	14 c0       	rjmp	.+40     	; 0xc00 <__fixunssfsi+0x4c>
 bd8:	b1 30       	cpi	r27, 0x01	; 1
 bda:	91 f0       	breq	.+36     	; 0xc00 <__fixunssfsi+0x4c>
 bdc:	0e 94 f5 06 	call	0xdea	; 0xdea <__fp_zero>
 be0:	b1 e0       	ldi	r27, 0x01	; 1
 be2:	08 95       	ret
 be4:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__fp_zero>
 be8:	67 2f       	mov	r22, r23
 bea:	78 2f       	mov	r23, r24
 bec:	88 27       	eor	r24, r24
 bee:	b8 5f       	subi	r27, 0xF8	; 248
 bf0:	39 f0       	breq	.+14     	; 0xc00 <__fixunssfsi+0x4c>
 bf2:	b9 3f       	cpi	r27, 0xF9	; 249
 bf4:	cc f3       	brlt	.-14     	; 0xbe8 <__fixunssfsi+0x34>
 bf6:	86 95       	lsr	r24
 bf8:	77 95       	ror	r23
 bfa:	67 95       	ror	r22
 bfc:	b3 95       	inc	r27
 bfe:	d9 f7       	brne	.-10     	; 0xbf6 <__fixunssfsi+0x42>
 c00:	3e f4       	brtc	.+14     	; 0xc10 <__fixunssfsi+0x5c>
 c02:	90 95       	com	r25
 c04:	80 95       	com	r24
 c06:	70 95       	com	r23
 c08:	61 95       	neg	r22
 c0a:	7f 4f       	sbci	r23, 0xFF	; 255
 c0c:	8f 4f       	sbci	r24, 0xFF	; 255
 c0e:	9f 4f       	sbci	r25, 0xFF	; 255
 c10:	08 95       	ret

00000c12 <__floatunsisf>:
 c12:	e8 94       	clt
 c14:	09 c0       	rjmp	.+18     	; 0xc28 <__floatsisf+0x12>

00000c16 <__floatsisf>:
 c16:	97 fb       	bst	r25, 7
 c18:	3e f4       	brtc	.+14     	; 0xc28 <__floatsisf+0x12>
 c1a:	90 95       	com	r25
 c1c:	80 95       	com	r24
 c1e:	70 95       	com	r23
 c20:	61 95       	neg	r22
 c22:	7f 4f       	sbci	r23, 0xFF	; 255
 c24:	8f 4f       	sbci	r24, 0xFF	; 255
 c26:	9f 4f       	sbci	r25, 0xFF	; 255
 c28:	99 23       	and	r25, r25
 c2a:	a9 f0       	breq	.+42     	; 0xc56 <__floatsisf+0x40>
 c2c:	f9 2f       	mov	r31, r25
 c2e:	96 e9       	ldi	r25, 0x96	; 150
 c30:	bb 27       	eor	r27, r27
 c32:	93 95       	inc	r25
 c34:	f6 95       	lsr	r31
 c36:	87 95       	ror	r24
 c38:	77 95       	ror	r23
 c3a:	67 95       	ror	r22
 c3c:	b7 95       	ror	r27
 c3e:	f1 11       	cpse	r31, r1
 c40:	f8 cf       	rjmp	.-16     	; 0xc32 <__floatsisf+0x1c>
 c42:	fa f4       	brpl	.+62     	; 0xc82 <__floatsisf+0x6c>
 c44:	bb 0f       	add	r27, r27
 c46:	11 f4       	brne	.+4      	; 0xc4c <__floatsisf+0x36>
 c48:	60 ff       	sbrs	r22, 0
 c4a:	1b c0       	rjmp	.+54     	; 0xc82 <__floatsisf+0x6c>
 c4c:	6f 5f       	subi	r22, 0xFF	; 255
 c4e:	7f 4f       	sbci	r23, 0xFF	; 255
 c50:	8f 4f       	sbci	r24, 0xFF	; 255
 c52:	9f 4f       	sbci	r25, 0xFF	; 255
 c54:	16 c0       	rjmp	.+44     	; 0xc82 <__floatsisf+0x6c>
 c56:	88 23       	and	r24, r24
 c58:	11 f0       	breq	.+4      	; 0xc5e <__floatsisf+0x48>
 c5a:	96 e9       	ldi	r25, 0x96	; 150
 c5c:	11 c0       	rjmp	.+34     	; 0xc80 <__floatsisf+0x6a>
 c5e:	77 23       	and	r23, r23
 c60:	21 f0       	breq	.+8      	; 0xc6a <__floatsisf+0x54>
 c62:	9e e8       	ldi	r25, 0x8E	; 142
 c64:	87 2f       	mov	r24, r23
 c66:	76 2f       	mov	r23, r22
 c68:	05 c0       	rjmp	.+10     	; 0xc74 <__floatsisf+0x5e>
 c6a:	66 23       	and	r22, r22
 c6c:	71 f0       	breq	.+28     	; 0xc8a <__floatsisf+0x74>
 c6e:	96 e8       	ldi	r25, 0x86	; 134
 c70:	86 2f       	mov	r24, r22
 c72:	70 e0       	ldi	r23, 0x00	; 0
 c74:	60 e0       	ldi	r22, 0x00	; 0
 c76:	2a f0       	brmi	.+10     	; 0xc82 <__floatsisf+0x6c>
 c78:	9a 95       	dec	r25
 c7a:	66 0f       	add	r22, r22
 c7c:	77 1f       	adc	r23, r23
 c7e:	88 1f       	adc	r24, r24
 c80:	da f7       	brpl	.-10     	; 0xc78 <__floatsisf+0x62>
 c82:	88 0f       	add	r24, r24
 c84:	96 95       	lsr	r25
 c86:	87 95       	ror	r24
 c88:	97 f9       	bld	r25, 7
 c8a:	08 95       	ret

00000c8c <__fp_cmp>:
 c8c:	99 0f       	add	r25, r25
 c8e:	00 08       	sbc	r0, r0
 c90:	55 0f       	add	r21, r21
 c92:	aa 0b       	sbc	r26, r26
 c94:	e0 e8       	ldi	r30, 0x80	; 128
 c96:	fe ef       	ldi	r31, 0xFE	; 254
 c98:	16 16       	cp	r1, r22
 c9a:	17 06       	cpc	r1, r23
 c9c:	e8 07       	cpc	r30, r24
 c9e:	f9 07       	cpc	r31, r25
 ca0:	c0 f0       	brcs	.+48     	; 0xcd2 <__fp_cmp+0x46>
 ca2:	12 16       	cp	r1, r18
 ca4:	13 06       	cpc	r1, r19
 ca6:	e4 07       	cpc	r30, r20
 ca8:	f5 07       	cpc	r31, r21
 caa:	98 f0       	brcs	.+38     	; 0xcd2 <__fp_cmp+0x46>
 cac:	62 1b       	sub	r22, r18
 cae:	73 0b       	sbc	r23, r19
 cb0:	84 0b       	sbc	r24, r20
 cb2:	95 0b       	sbc	r25, r21
 cb4:	39 f4       	brne	.+14     	; 0xcc4 <__fp_cmp+0x38>
 cb6:	0a 26       	eor	r0, r26
 cb8:	61 f0       	breq	.+24     	; 0xcd2 <__fp_cmp+0x46>
 cba:	23 2b       	or	r18, r19
 cbc:	24 2b       	or	r18, r20
 cbe:	25 2b       	or	r18, r21
 cc0:	21 f4       	brne	.+8      	; 0xcca <__fp_cmp+0x3e>
 cc2:	08 95       	ret
 cc4:	0a 26       	eor	r0, r26
 cc6:	09 f4       	brne	.+2      	; 0xcca <__fp_cmp+0x3e>
 cc8:	a1 40       	sbci	r26, 0x01	; 1
 cca:	a6 95       	lsr	r26
 ccc:	8f ef       	ldi	r24, 0xFF	; 255
 cce:	81 1d       	adc	r24, r1
 cd0:	81 1d       	adc	r24, r1
 cd2:	08 95       	ret

00000cd4 <__fp_inf>:
 cd4:	97 f9       	bld	r25, 7
 cd6:	9f 67       	ori	r25, 0x7F	; 127
 cd8:	80 e8       	ldi	r24, 0x80	; 128
 cda:	70 e0       	ldi	r23, 0x00	; 0
 cdc:	60 e0       	ldi	r22, 0x00	; 0
 cde:	08 95       	ret

00000ce0 <__fp_mintl>:
 ce0:	88 23       	and	r24, r24
 ce2:	71 f4       	brne	.+28     	; 0xd00 <__fp_mintl+0x20>
 ce4:	77 23       	and	r23, r23
 ce6:	21 f0       	breq	.+8      	; 0xcf0 <__fp_mintl+0x10>
 ce8:	98 50       	subi	r25, 0x08	; 8
 cea:	87 2b       	or	r24, r23
 cec:	76 2f       	mov	r23, r22
 cee:	07 c0       	rjmp	.+14     	; 0xcfe <__fp_mintl+0x1e>
 cf0:	66 23       	and	r22, r22
 cf2:	11 f4       	brne	.+4      	; 0xcf8 <__fp_mintl+0x18>
 cf4:	99 27       	eor	r25, r25
 cf6:	0d c0       	rjmp	.+26     	; 0xd12 <__fp_mintl+0x32>
 cf8:	90 51       	subi	r25, 0x10	; 16
 cfa:	86 2b       	or	r24, r22
 cfc:	70 e0       	ldi	r23, 0x00	; 0
 cfe:	60 e0       	ldi	r22, 0x00	; 0
 d00:	2a f0       	brmi	.+10     	; 0xd0c <__fp_mintl+0x2c>
 d02:	9a 95       	dec	r25
 d04:	66 0f       	add	r22, r22
 d06:	77 1f       	adc	r23, r23
 d08:	88 1f       	adc	r24, r24
 d0a:	da f7       	brpl	.-10     	; 0xd02 <__fp_mintl+0x22>
 d0c:	88 0f       	add	r24, r24
 d0e:	96 95       	lsr	r25
 d10:	87 95       	ror	r24
 d12:	97 f9       	bld	r25, 7
 d14:	08 95       	ret

00000d16 <__fp_mpack>:
 d16:	9f 3f       	cpi	r25, 0xFF	; 255
 d18:	31 f0       	breq	.+12     	; 0xd26 <__fp_mpack_finite+0xc>

00000d1a <__fp_mpack_finite>:
 d1a:	91 50       	subi	r25, 0x01	; 1
 d1c:	20 f4       	brcc	.+8      	; 0xd26 <__fp_mpack_finite+0xc>
 d1e:	87 95       	ror	r24
 d20:	77 95       	ror	r23
 d22:	67 95       	ror	r22
 d24:	b7 95       	ror	r27
 d26:	88 0f       	add	r24, r24
 d28:	91 1d       	adc	r25, r1
 d2a:	96 95       	lsr	r25
 d2c:	87 95       	ror	r24
 d2e:	97 f9       	bld	r25, 7
 d30:	08 95       	ret

00000d32 <__fp_nan>:
 d32:	9f ef       	ldi	r25, 0xFF	; 255
 d34:	80 ec       	ldi	r24, 0xC0	; 192
 d36:	08 95       	ret

00000d38 <__fp_pscA>:
 d38:	00 24       	eor	r0, r0
 d3a:	0a 94       	dec	r0
 d3c:	16 16       	cp	r1, r22
 d3e:	17 06       	cpc	r1, r23
 d40:	18 06       	cpc	r1, r24
 d42:	09 06       	cpc	r0, r25
 d44:	08 95       	ret

00000d46 <__fp_pscB>:
 d46:	00 24       	eor	r0, r0
 d48:	0a 94       	dec	r0
 d4a:	12 16       	cp	r1, r18
 d4c:	13 06       	cpc	r1, r19
 d4e:	14 06       	cpc	r1, r20
 d50:	05 06       	cpc	r0, r21
 d52:	08 95       	ret

00000d54 <__fp_round>:
 d54:	09 2e       	mov	r0, r25
 d56:	03 94       	inc	r0
 d58:	00 0c       	add	r0, r0
 d5a:	11 f4       	brne	.+4      	; 0xd60 <__fp_round+0xc>
 d5c:	88 23       	and	r24, r24
 d5e:	52 f0       	brmi	.+20     	; 0xd74 <__fp_round+0x20>
 d60:	bb 0f       	add	r27, r27
 d62:	40 f4       	brcc	.+16     	; 0xd74 <__fp_round+0x20>
 d64:	bf 2b       	or	r27, r31
 d66:	11 f4       	brne	.+4      	; 0xd6c <__fp_round+0x18>
 d68:	60 ff       	sbrs	r22, 0
 d6a:	04 c0       	rjmp	.+8      	; 0xd74 <__fp_round+0x20>
 d6c:	6f 5f       	subi	r22, 0xFF	; 255
 d6e:	7f 4f       	sbci	r23, 0xFF	; 255
 d70:	8f 4f       	sbci	r24, 0xFF	; 255
 d72:	9f 4f       	sbci	r25, 0xFF	; 255
 d74:	08 95       	ret

00000d76 <__fp_split3>:
 d76:	57 fd       	sbrc	r21, 7
 d78:	90 58       	subi	r25, 0x80	; 128
 d7a:	44 0f       	add	r20, r20
 d7c:	55 1f       	adc	r21, r21
 d7e:	59 f0       	breq	.+22     	; 0xd96 <__fp_splitA+0x10>
 d80:	5f 3f       	cpi	r21, 0xFF	; 255
 d82:	71 f0       	breq	.+28     	; 0xda0 <__fp_splitA+0x1a>
 d84:	47 95       	ror	r20

00000d86 <__fp_splitA>:
 d86:	88 0f       	add	r24, r24
 d88:	97 fb       	bst	r25, 7
 d8a:	99 1f       	adc	r25, r25
 d8c:	61 f0       	breq	.+24     	; 0xda6 <__fp_splitA+0x20>
 d8e:	9f 3f       	cpi	r25, 0xFF	; 255
 d90:	79 f0       	breq	.+30     	; 0xdb0 <__fp_splitA+0x2a>
 d92:	87 95       	ror	r24
 d94:	08 95       	ret
 d96:	12 16       	cp	r1, r18
 d98:	13 06       	cpc	r1, r19
 d9a:	14 06       	cpc	r1, r20
 d9c:	55 1f       	adc	r21, r21
 d9e:	f2 cf       	rjmp	.-28     	; 0xd84 <__fp_split3+0xe>
 da0:	46 95       	lsr	r20
 da2:	f1 df       	rcall	.-30     	; 0xd86 <__fp_splitA>
 da4:	08 c0       	rjmp	.+16     	; 0xdb6 <__fp_splitA+0x30>
 da6:	16 16       	cp	r1, r22
 da8:	17 06       	cpc	r1, r23
 daa:	18 06       	cpc	r1, r24
 dac:	99 1f       	adc	r25, r25
 dae:	f1 cf       	rjmp	.-30     	; 0xd92 <__fp_splitA+0xc>
 db0:	86 95       	lsr	r24
 db2:	71 05       	cpc	r23, r1
 db4:	61 05       	cpc	r22, r1
 db6:	08 94       	sec
 db8:	08 95       	ret

00000dba <__fp_trunc>:
 dba:	0e 94 c3 06 	call	0xd86	; 0xd86 <__fp_splitA>
 dbe:	a0 f0       	brcs	.+40     	; 0xde8 <__fp_trunc+0x2e>
 dc0:	be e7       	ldi	r27, 0x7E	; 126
 dc2:	b9 17       	cp	r27, r25
 dc4:	88 f4       	brcc	.+34     	; 0xde8 <__fp_trunc+0x2e>
 dc6:	bb 27       	eor	r27, r27
 dc8:	9f 38       	cpi	r25, 0x8F	; 143
 dca:	60 f4       	brcc	.+24     	; 0xde4 <__fp_trunc+0x2a>
 dcc:	16 16       	cp	r1, r22
 dce:	b1 1d       	adc	r27, r1
 dd0:	67 2f       	mov	r22, r23
 dd2:	78 2f       	mov	r23, r24
 dd4:	88 27       	eor	r24, r24
 dd6:	98 5f       	subi	r25, 0xF8	; 248
 dd8:	f7 cf       	rjmp	.-18     	; 0xdc8 <__fp_trunc+0xe>
 dda:	86 95       	lsr	r24
 ddc:	77 95       	ror	r23
 dde:	67 95       	ror	r22
 de0:	b1 1d       	adc	r27, r1
 de2:	93 95       	inc	r25
 de4:	96 39       	cpi	r25, 0x96	; 150
 de6:	c8 f3       	brcs	.-14     	; 0xdda <__fp_trunc+0x20>
 de8:	08 95       	ret

00000dea <__fp_zero>:
 dea:	e8 94       	clt

00000dec <__fp_szero>:
 dec:	bb 27       	eor	r27, r27
 dee:	66 27       	eor	r22, r22
 df0:	77 27       	eor	r23, r23
 df2:	cb 01       	movw	r24, r22
 df4:	97 f9       	bld	r25, 7
 df6:	08 95       	ret

00000df8 <__gesf2>:
 df8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__fp_cmp>
 dfc:	08 f4       	brcc	.+2      	; 0xe00 <__gesf2+0x8>
 dfe:	8f ef       	ldi	r24, 0xFF	; 255
 e00:	08 95       	ret

00000e02 <__mulsf3>:
 e02:	0e 94 14 07 	call	0xe28	; 0xe28 <__mulsf3x>
 e06:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__fp_round>
 e0a:	0e 94 9c 06 	call	0xd38	; 0xd38 <__fp_pscA>
 e0e:	38 f0       	brcs	.+14     	; 0xe1e <__mulsf3+0x1c>
 e10:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fp_pscB>
 e14:	20 f0       	brcs	.+8      	; 0xe1e <__mulsf3+0x1c>
 e16:	95 23       	and	r25, r21
 e18:	11 f0       	breq	.+4      	; 0xe1e <__mulsf3+0x1c>
 e1a:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__fp_inf>
 e1e:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__fp_nan>
 e22:	11 24       	eor	r1, r1
 e24:	0c 94 f6 06 	jmp	0xdec	; 0xdec <__fp_szero>

00000e28 <__mulsf3x>:
 e28:	0e 94 bb 06 	call	0xd76	; 0xd76 <__fp_split3>
 e2c:	70 f3       	brcs	.-36     	; 0xe0a <__mulsf3+0x8>

00000e2e <__mulsf3_pse>:
 e2e:	95 9f       	mul	r25, r21
 e30:	c1 f3       	breq	.-16     	; 0xe22 <__mulsf3+0x20>
 e32:	95 0f       	add	r25, r21
 e34:	50 e0       	ldi	r21, 0x00	; 0
 e36:	55 1f       	adc	r21, r21
 e38:	62 9f       	mul	r22, r18
 e3a:	f0 01       	movw	r30, r0
 e3c:	72 9f       	mul	r23, r18
 e3e:	bb 27       	eor	r27, r27
 e40:	f0 0d       	add	r31, r0
 e42:	b1 1d       	adc	r27, r1
 e44:	63 9f       	mul	r22, r19
 e46:	aa 27       	eor	r26, r26
 e48:	f0 0d       	add	r31, r0
 e4a:	b1 1d       	adc	r27, r1
 e4c:	aa 1f       	adc	r26, r26
 e4e:	64 9f       	mul	r22, r20
 e50:	66 27       	eor	r22, r22
 e52:	b0 0d       	add	r27, r0
 e54:	a1 1d       	adc	r26, r1
 e56:	66 1f       	adc	r22, r22
 e58:	82 9f       	mul	r24, r18
 e5a:	22 27       	eor	r18, r18
 e5c:	b0 0d       	add	r27, r0
 e5e:	a1 1d       	adc	r26, r1
 e60:	62 1f       	adc	r22, r18
 e62:	73 9f       	mul	r23, r19
 e64:	b0 0d       	add	r27, r0
 e66:	a1 1d       	adc	r26, r1
 e68:	62 1f       	adc	r22, r18
 e6a:	83 9f       	mul	r24, r19
 e6c:	a0 0d       	add	r26, r0
 e6e:	61 1d       	adc	r22, r1
 e70:	22 1f       	adc	r18, r18
 e72:	74 9f       	mul	r23, r20
 e74:	33 27       	eor	r19, r19
 e76:	a0 0d       	add	r26, r0
 e78:	61 1d       	adc	r22, r1
 e7a:	23 1f       	adc	r18, r19
 e7c:	84 9f       	mul	r24, r20
 e7e:	60 0d       	add	r22, r0
 e80:	21 1d       	adc	r18, r1
 e82:	82 2f       	mov	r24, r18
 e84:	76 2f       	mov	r23, r22
 e86:	6a 2f       	mov	r22, r26
 e88:	11 24       	eor	r1, r1
 e8a:	9f 57       	subi	r25, 0x7F	; 127
 e8c:	50 40       	sbci	r21, 0x00	; 0
 e8e:	9a f0       	brmi	.+38     	; 0xeb6 <__mulsf3_pse+0x88>
 e90:	f1 f0       	breq	.+60     	; 0xece <__mulsf3_pse+0xa0>
 e92:	88 23       	and	r24, r24
 e94:	4a f0       	brmi	.+18     	; 0xea8 <__mulsf3_pse+0x7a>
 e96:	ee 0f       	add	r30, r30
 e98:	ff 1f       	adc	r31, r31
 e9a:	bb 1f       	adc	r27, r27
 e9c:	66 1f       	adc	r22, r22
 e9e:	77 1f       	adc	r23, r23
 ea0:	88 1f       	adc	r24, r24
 ea2:	91 50       	subi	r25, 0x01	; 1
 ea4:	50 40       	sbci	r21, 0x00	; 0
 ea6:	a9 f7       	brne	.-22     	; 0xe92 <__mulsf3_pse+0x64>
 ea8:	9e 3f       	cpi	r25, 0xFE	; 254
 eaa:	51 05       	cpc	r21, r1
 eac:	80 f0       	brcs	.+32     	; 0xece <__mulsf3_pse+0xa0>
 eae:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__fp_inf>
 eb2:	0c 94 f6 06 	jmp	0xdec	; 0xdec <__fp_szero>
 eb6:	5f 3f       	cpi	r21, 0xFF	; 255
 eb8:	e4 f3       	brlt	.-8      	; 0xeb2 <__mulsf3_pse+0x84>
 eba:	98 3e       	cpi	r25, 0xE8	; 232
 ebc:	d4 f3       	brlt	.-12     	; 0xeb2 <__mulsf3_pse+0x84>
 ebe:	86 95       	lsr	r24
 ec0:	77 95       	ror	r23
 ec2:	67 95       	ror	r22
 ec4:	b7 95       	ror	r27
 ec6:	f7 95       	ror	r31
 ec8:	e7 95       	ror	r30
 eca:	9f 5f       	subi	r25, 0xFF	; 255
 ecc:	c1 f7       	brne	.-16     	; 0xebe <__mulsf3_pse+0x90>
 ece:	fe 2b       	or	r31, r30
 ed0:	88 0f       	add	r24, r24
 ed2:	91 1d       	adc	r25, r1
 ed4:	96 95       	lsr	r25
 ed6:	87 95       	ror	r24
 ed8:	97 f9       	bld	r25, 7
 eda:	08 95       	ret

00000edc <_exit>:
 edc:	f8 94       	cli

00000ede <__stop_program>:
 ede:	ff cf       	rjmp	.-2      	; 0xede <__stop_program>
